#!/bin/bash

function adb_delete_su_datas() {

    adb_su

    mssg=$(printf "${text_datas_remove}\n" "data")
    display_mssg "n" "${mssg}" "" "2"

    adb shell "${adb_su}find /data/app/ -type f -name 'com.koushikdutta.superuser-*' -delete"
    adb shell "${adb_su}find /data/app/ -type f -name 'com.mgyun.shua.su-*' -delete"
    adb shell "${adb_su}find /data/app/ -type f -name 'com.noshufou.android.su-*' -delete"
    adb shell "${adb_su}find /data/app/ -type f -name '*eu.chainfire.supersu*' -delete"

    adb shell "${adb_su}find /data/app-lib/ -type d -name '*eu.chainfire.supersu*' -depth | xargs -0 rm -rf {}" #-exec rm -rf \"{}\" \;"

    adb shell "${adb_su}find /data/data/ -type d -name '*eu.chainfire.supersu*' -depth | xargs -0 rm -rf {}" #-exec rm -rf \"{}\" \;"

    adb shell "${adb_su}find /data/dalvik-cache/ -type f -name '*com.noshufou.android.su*' -delete"
    adb shell "${adb_su}find /data/dalvik-cache/ -type f -name '*com.koushikdutta.superuser*' -delete"
    adb shell "${adb_su}find /data/dalvik-cache/ -type f -name '*com.mgyun.shua.su*' -delete"
    adb shell "${adb_su}find /data/dalvik-cache/ -type f -name '*eu.chainfire.supersu*' -delete"
    adb shell "${adb_su}find /data/dalvik-cache/ -type f -iname '*superuser.apk*' -delete"
    adb shell "${adb_su}find /data/dalvik-cache/ -type f -name '*.oat' -delete"

    mssg=$(printf "${text_datas_removed}\n" "data")
    display_mssg "n" "${mssg}"

}

function adb_delete_su_system() {

    adb_su

    mssg=$(printf "${text_remove}\n" "${SU}")
    display_mssg "n" "${mssg}" "" "2"

    adb shell "${adb_su}find /system/bin/.ext/ -type f -name '*su' -delete"
    adb shell "${adb_su}find '${SYS_BIN}' -type f -name 'sugote*' -delete"
    adb shell "${adb_su}find '${SYS_BIN}' -type f -name '${SSUD}' -delete"
    adb shell "${adb_su}find '${SYS_ETC}init.d' -type f -name 'daemonsu' -delete"
    adb shell "${adb_su}find '${SYS_ETC}' -type f -name '*installed_su_daemon' -delete"
    adb shell "${adb_su}find /system/bin/ -name 'su' -delete"
    adb shell "${adb_su}find '${SYS_BIN}' -type f -name '${SU}' -delete"

    mssg=$(printf "${text_datas_removed}\n" "system")
    display_mssg "n" "${mssg}"

}

function adb_delete_supersu() {

    adb_su

    mssg=$(printf "${text_remove}\n" "${SuperSU}")
    display_mssg "n" "${mssg}"

    adb shell "${adb_su}find '${SYS_APP}' -iname 'superuser*' -delete"
    adb shell "${adb_su}find '${SYS_APP}' -iname 'supersu*' -delete"

}

function adb_flash_partitions() {

    write_file "log" "*** $FUNCNAME: Call ADB to flash partitions "

    path=($(explode "/" "${BCKP_PHONE}")); display_detected "path: ${path[@]}"
    # verify if partition backup exists if not, then mount...
    if [[ -z "$(adb_verify_mount "${path[0]}")" ]]; then adb_mount_partition "${path[0]}"; fi

    adb_mkdir "${BCKP_PHONE}"

    if [[ -z "$(adb_test "-d ${BCKP_PHONE}")" ]]; then

        for index in "${!FILES_CHOOSED[@]}"; do

            if [[ -f "${FILES_CHOOSED[${index}]}" ]]; then

                mssg="$(printf "${text_progress_adb_pull}" "${FILES_CHOOSED[${index}]}")"
                (
                adb push "${FILES_CHOOSED[${index}]}" "${BCKP_PHONE}"
                ) | display_mssg "p" "${mssg}" "${title_adb_progress}"

                local -i stat_ext=$(file_stat "${FILES_CHOOSED[${index}]}"); display_detected "stat_ext: ${stat_ext}"

                local file="${BCKP_PHONE}$(basename ${FILES_CHOOSED[${index}]})"; display_detected "file: ${file}"

                if [[ -z "$(adb_test "-f ${file}")" ]]; then

                    # test to verify size
                    local -i stat_int=$(adb_stat_file "${file}"); display_detected "stat_int: ${stat_int}"

                    if [[ "${stat_ext}" -eq "${stat_int}" ]]; then

                        if [[ "${ZENITY}" -ne 0 ]]; then
                            local key="$(array_search "${index}" "${MTD_NAME[@]}")"; display_detected "key: ${key}"
                        fi

                        if [[ "${DIALOG}" -ne 0 ]]; then
                            local key="${FILES_CHOOSED[$x]}"; display_detected "key: ${key}"
                        fi

                        local ddname="${MTD_NAME[${key}]}"; display_detected "dd_name: ${ddname}"
                        local ddif="${file}"; display_detected "dd_if: ${ddif}"
                        local ddof="/dev/${ddname}"; display_detected "dd_of: ${ddof}"
                        local ddbs="${MTD_SIZE_DEC[${key}]}"; display_detected "dd_bs: ${ddbs}"

                        mssg="$(printf "${text_progress_adb_dd}" "${ddif}")"
                        (
                        adb_write_img "${ddname}" "${ddif}" "${ddof}" "${ddbs}" "${ddskip}"
                        ) | display_mssg "p" "${mssg}" "${title_adb_progress}"

                        adb shell rm -f "${file}"

                        let x=x+1

                    else

                        mssg="$(printf "${text_error_size_file}" "$FUNCNAME" "${stat_int}" "${stat_ext}")"
                        display_error "${mssg}"

                    fi

                else

                    mssg="$(printf "${text_error_file}" "${file}")"
                    display_error "${mssg}"

                fi

            fi

        done

    else

        mssg="$(printf "${text_bckp_phone_inexists}" "${BCKP_PHONE}")"
        display_error "${mssg}"

    fi

    unset search

}

function adb_mkdir() {

    local folder="$1"

    adb_su

    adb shell 'if [[ ! -d "${folder}" ]]; then ${adb_su}mkdir "${folder}"; fi'

    unset folder

}

function adb_mount_partition() {

    if [[ "${vid}" != "${VID[0]}" ]]; then

        #display_mssg "i" "\n${text_mount_try}\n${text_see_phone}\n"; sleep 1

        case "$1" in
            "r")
                mssg=$(printf "%s" "\n${text_mount_try}\n")
                mssg="${mssg}"$(printf "${text_mount_ro}\n" "system");
                mssg="${mssg}\n${text_see_phone}\n"

                display_mssg "i" "${mssg}"

                io="ro"
            ;;
            "w")
                mssg=$(printf "%s" "\n${text_mount_try}\n")
                mssg="${mssg}"$(printf "${text_mount_rw}\n" "system");
                mssg="${mssg}\n${text_see_phone}\n"
                display_mssg "i" "${mssg}"

                mssg=$(printf "${text_mount_rw}\n" "system")
                display_mssg "n" "${mssg}"

                io="rw"
            ;;
        esac

        adb shell su -c "mount -o remount,${io} /system"

        if [[ $? -eq 0 ]]; then

            case "${io}" in
                "ro") mode="read-only" ;;
                "rw") mode="read and write" ;;
            esac

            mssg=$(printf "${text_dev_mode}\n" "${mode}")
            display_mssg "n" "${mssg}"
            unset mode

        else

            display_error "${text_mount_error}"
            exit 1;

        fi

        unset io

    else

        display_mssg "n" "\n${text_mount_try}\n"; sleep 1

        adb shell busybox mount "$1"

        if [[ $? -ne 0 ]]; then
            key=$(array_search "$1" "${PART_TEXT[0]}")
            search="${PART_NAME[${key}]}"
            key=$(array_search "${search}" "${MTD_NAME[@]}")
            adb shell busybox mount "${key}" "${MTD_MAP[${key}]}"
            unset key
        fi

    fi

}

function adb_read_partitions() {

    adb shell cat /proc/dumchar_info > "${FILE_PARAM}";

}

function adb_reboot() {

    display_mssg "i" "${text_reboot_now}"; sleep 1
    adb reboot

}

function adb_reboot_recovery() {

    display_mssg "i" "${text_reboot_recovery}"; sleep 1
    adb reboot recovery

}

function adb_reboot_system() {

    mssg=$(printf "${text_goodbye_info}\n${text_goodbye}")
    display_mssg "i" "${mssg}"
    adb reboot

}

function adb_restart_server() {

    adb kill-server
    adb start-server

}

function adb_root_system() {

    mssg=$(printf "${text_mount_rw}" "system")
    display_mssg "n" "${mssg}"

    #adb shell mount "${info_map['android']}" /system
    if [[ -z "$(adb_verify_mount system)" ]]; then adb_mount_partition "system"; fi

    local search=$(adb shell grep "system" /proc/mounts)
    #if [[ "$(adb shell mount | busybox grep system)" ]]; then
    if [[ -n "${search}" ]]; then

        sleep 1
        local ERROR=0

        if [[ -f "${DIR_SSU}" ]]; then
            display_mssg "n" "${text_supersu_cp}${SYS_APP}"
            adb push "${DIR_SSU}" "${SYS_APP}"

            display_mssg "n" "${text_supersu_chmod}${SYS_APP}"
            adb shell 'if [[ -f "${SYS_APP}${SuperSU}" ]]; then chmod 0644 "${SYS_APP}${SuperSU}"; fi'
            adb shell 'if [[ -f "${SYS_APP}${SuperSU}" ]]; then chown 0:0 "${SYS_APP}${SuperSU}"; fi'
            sleep 1
        else
            mssg="$(printf "${text_error_file}" "${DIR_SSU}")"
            display_error "${mssg}"
            ERROR=1
        fi

        if [[ -f "${DIR_SU}" ]]; then
            display_mssg "n" "${text_su_cp}${SYS_BIN}"
            adb push "${DIR_SU}" "${SYS_BIN}"
            #adb shell cp "${SYS_BIN}${SU}" "${SYS_BIN}daemonsu"
            #adb shell cp "${SYS_BIN}${SU}" "/system/bin/.ext/.${SU}"
            sleep 1

            display_mssg "n" "chmod and chown ${SYS_BIN}${SU}"

            SDK=$(adb shell egrep ro.build.version.sdk /system/build.prop | dd bs=1 skip=21 count=2)
            #SDK="$(adb shell grep ro.build.version.sdk /system/build.prop)"
            #echo "SDK: $SDK"
            #SDK="${SDK##*=}"
            echo "SDK: ${SDK}"
            if [[ "${SDK}" -gt 17 ]]; then
                display_detected "SDK: ${SDK} > 17"
                adb shell 'if [[ -f "${SYS_BIN}${SU}" ]]; then chmod 0755 "${SYS_BIN}${SU}"; fi'
                #adb shell chmod 0755 "/system/bin/.ext/.${SU}"
            else
                display_detected "SDK: ${SDK} <= 17"
                #adb shell 'if [[ -f "${SYS_BIN}${SU}" ]]; then chmod 06755 "${SYS_BIN}${SU}"; fi'
                adb shell 'if [[ -f /system/xbin/su ]]; then chmod 06755 /system/xbin/su; fi'
                #adb shell chmod 06755 "/system/bin/.ext/.${SU}"
            fi
            unset SDK

            adb shell 'if [[ -f "${SYS_BIN}${SU}" ]]; then chown 0:0 "${SYS_BIN}${SU}"; fi'
            adb shell "if [[ ! -h '/system/bin/${SU}' ]]; then ln -s ${SYS_BIN}${SU} /system/bin/${SU}; fi"
        else
            mssg="$(printf "${text_error_file}" "${DIR_SU}")"
            display_error "${mssg}"
            ERROR=1
        fi

        #adb shell chmod 0755 "${SYS_BIN}daemonsu"
        #adb shell chown 0:0 "/system/bin/.ext/.${SU}"

        #display_mssg "n" "cp busybox into /tmp"
        #adb shell cp "${SYS_BIN}busybox" /tmp/busybox
        #adb shell chmod 0755 /tmp/busybox
        #adb shell chown 0:0 /tmp/busybox
        #adb shell busybox umount /system

        #display_mssg "n" "mount system by /tmp/busybox"
        #adb shell /tmp/busybox mount /system

        #adb shell "if [[ ! -d /system/bin/.ext ]]; then mkdir /system/bin/.ext; fi"
        #adb shell chmod 0777 /system/bin/.ext
        #adb shell chown 0:0 /system/bin/.ext

        #display_mssg "i" "Verify ${SYS_ETC}init.d and create if not exists!"
            #adb shell "if [[ ! -d '${SYS_ETC}init.d' ]]; then mkdir '${SYS_ETC}init.d'; fi"
            #adb push "${DIR_SSUD}" "${SYS_ETC}init.d"

            #adb shell chmod 0755 "${SYS_ETC}init.d/${SSUD}"
            #adb shell chown 0:0 "${SYS_ETC}init.d/${SSUD}"

            #adb shell "if [[ ! -f '${SYS_ETC}.installed_su_daemon' ]]; then touch '${SYS_ETC}.installed_su_daemon'; fi"
            #adb shell "echo 1 > ${SYS_ETC}.installed_su_daemon"

            #adb shell chmod 0644 "${SYS_ETC}.installed_su_daemon"
            #adb shell chown 0:0 "${SYS_ETC}.installed_su_daemon"

        #adb shell "${SYS_BIN}${SU} --install"

        #adb shell chmod 04755 /system/xbin/busybox
        #adb shell chown 0:0 /system/xbin/busybox
        #adb shell /system/xbin/busybox --install -s /system/xbin

        #display_mssg "n" "rm /tmp/busybox"
        #adb shell /tmp/busybox umount /system
        #adb shell rm -f /tmp/busybox

        adb_umount_partition "system"

        sleep 1

        if [[ "${ERROR}" -eq 0 ]]; then
            mssg=$(printf "${text_SSU_installed}" "${SSU_VERSION}")
        else
            mssg=$(printf "${text_SSU_install_pb}" "${SSU_VERSION}")
        fi

        display_mssg "i" "${mssg}"
        unset mssg ERROR

    fi
    unset search

}

function adb_save_partitions() {

    write_file "log" "*** $FUNCNAME: Call ADB to save partitions "

    path=($(explode "/" "${BCKP_PHONE}")); display_detected "path: ${path[@]}"
    # verify if partition backup exists if not, then mount...
    if [[ -z "$(adb_verify_mount "${path[0]}")" ]]; then adb_mount_partition "${path[0]}"; fi

    adb_mkdir "${BCKP_PHONE}"

    if [[ -z "$(adb_test "-d ${BCKP_PHONE}")" ]]; then

        for (( x=0 ; x < $(count "${FILES_CHOOSED[@]}"); x++ )); do

            if [[ "${ZENITY}" -ne 0 ]]; then
                local key=$(bc <<< "$(array_search "${FILES_CHOOSED[$x]}" "${MTD_NAME[@]}") + 1"); display_detected "key: ${key}"
            fi

            if [[ "${DIALOG}" -ne 0 ]]; then
                local key="${FILES_CHOOSED[$x]}"; display_detected "key: ${key}"
            fi

            local ddname="${MTD_NAME[${key}]}"; display_detected "dd_name: ${ddname}"
            local ddof="${BCKP_PHONE}${MTD_NAME[${key}]}.img"; display_detected "dd_of: ${ddof}"
            local ddif="/dev/${ddname}"; display_detected "dd_if: ${ddif}"
            local ddbs="${MTD_SIZE_DEC[${key}]}"; display_detected "dd_bs: ${ddbs}"

            local -i stat_int=$(adb_stat_file "${ddof}"); display_detected "stat_int: ${stat_int}"

            mssg="$(printf "${text_progress_adb_dd}" "${ddif}")"
            (
            adb_write_img "${ddname}" "${ddif}" "${ddof}" "${ddbs}" "${ddskip}"
            ) | display_mssg "p" "${mssg}" "${title_adb_progress}"

            if [[ -z "$(adb_test "-f ${ddof}")" ]]; then

                mssg="$(printf "${text_progress_adb_pull}" "${ddof}")"
                (
                adb pull "${ddof}" "${DIR_SVG_DATED}"
                ) | display_mssg "p" "${mssg}" "${title_adb_progress}"

                local file="${DIR_SVG_DATED}/${MTD_NAME[${key}]}.img"; display_detected "file: ${file}"
                local -i stat_ext=$(file_stat "${file}"); display_detected "stat_ext: ${stat_ext}"

                if [[ "${stat_ext}" -eq "${stat_int}" ]]; then

                    adb shell rm -f "${ddof}"

                    display_mssg "n" "${text_bckp} ${file}"
                    write_file "log" "### $FUNCNAME: Partition saved: ${file}"

                else

                    mssg="$(printf "${text_error_size_file}" "$FUNCNAME" "${stat_int}" "${stat_ext}")"
                    display_error "${mssg}"

                fi

            else
                mssg="$(printf "${text_error_bckp}" "${ddof}")"
                display_error "${mssg}"

                write_file "log" "### $FUNCNAME: CANT saving Partition: ${DIR_SVG_DATED}/${MTD_NAME[${key}]}.img"
            fi

            if [[ "${ddname}" == "nvram" ]]; then
                if [[ -z "$(adb_test "-f ${BCKP_PHONE}nvram.tgz")" ]]; then
                    adb pull "${BCKP_PHONE}nvram.tgz" "${DIR_SVG_DATED}"
                    adb shell rm -r "${BCKP_PHONE}nvram.tgz"
                fi
            fi


            sleep 1

            unset ddif ddof ddbs ddskip key

        done
        unset x

    else

        mssg="$(printf "${text_bckp_phone_inexists}" "${BCKP_PHONE}")"
        display_error "${mssg}"

    fi

    unset search

}

function adb_write_img() {

    adb_su

    local ddname="$1" ddif="$2" ddof="$3" ddbs="$4" ddskip="$5"

    adb shell "${adb_su}dd if=${ddif} of=${ddof} bs=${ddbs} count=1"

    if [[ $? -eq 0 ]]; then

        display_mssg "n" "dd if=${ddif} of=${ddof} bs=${ddbs} count=1"
        write_file "log" "### $FUNCNAME: dd ${ddif} into ${ddof}"

    else

        mssg="$(printf "${text_error_write_img}" "${ddif}")"
        display_error "${mssg}"
        display_mssg "n" "${text_bckp_method2}${ddif}"

        case "${choice}" in

            "BACKUP")
                ddif="${MTD_MAP[${key}]}"; display_detected "${ddname}: new dd_if: ${ddif}"
            ;;
            "FLASH")
                ddof="${MTD_MAP[${key}]}"; display_detected "${ddname}: new dd_of: ${ddof}"
            ;;

        esac

        ddbs="${MTD_SIZE_BLOCK[${key}]}"; display_detected "${ddname}: new dd_bs: ${ddbs}"
        ddskip="${MTD_ADDR_BLOCK[${key}]}"; display_detected "${ddname}: new dd_skip: ${ddskip}"

        adb shell "${adb_su}dd if=${ddif} of=${ddof} bs=4096 count=${ddbs} skip=${ddskip}"

        if [[ $? -eq 0 ]]; then
            display_mssg "n" "dd if=${ddif} of=${ddof} bs=4096 count=${ddbs} skip=${ddskip}"
            write_file "log" "### $FUNCNAME: dd ${ddif} into ${ddof} [bs: 4096 | count: ${ddbs} | skip: ${ddskip}]"
        else
            mssg="$(printf "" "${ddif}")"
            display_error "${mssg}"
            display_mssg "n" "${text_sorry}"
        fi

    fi

    unset ddname ddif ddof ddbs ddskip

}

function adb_stat_file() {

    local file="$1"

    if [[ "${vid}" != "${VID[0]}" ]]; then
        echo $( sed 's/\r$//' <<< $(adb shell stat -c "%s" "${file}") )
    else
        echo $( sed 's/\r$//' <<< $(adb shell ls -l "${file}" | awk '{print $5}') )
    fi

    unset file

}

function adb_su() {

    adb_su=""

    if [[ "${vid}" != "${VID[0]}" ]]; then
        adb_su="su -c "
    fi

}

function adb_test() {

    adb shell 'if [[ "$1" ]]; then return 0; else return 1; fi'

}

function adb_umount_partition() {

    adb shell busybox umount "/$1"

}

function adb_verify_mount() {

    adb shell mount | busybox grep "$1"

}

function adb_whoami() {

    adb_su
    adb shell "${adb_su}"whoami | sed 's/\r$//'
    #display_detected "${id}"

}
