#!/bin/bash

function display_detected() {

    # call: display_detected mssg
    local mssg=$(printf "$1\n" "$2");

    if [[ "${DIALOG}" -ne 0 ]]; then

        if [[ "${esc_seq}" ]]; then esc_seq="\e["; neutral=0; fi
        echo -e "${esc_seq};3${green}m${mssg}${esc_seq};${neutral}m"
        #echo -e "\Z${bold}\Z${green}${mssg}\Z${neutral}\Z${unbold}"

    elif [[ "${ZENITY}" -ne 0 ]]; then

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; neutral=0; fi
        echo -e "${esc_seq};32m${mssg}${esc_seq};${neutral}m"

    else

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; fi
        echo -e "${esc_seq};${green}m${mssg}${esc_seq};${neutral}m"

    fi

    write_file "log" "### Detected: ${mssg}"

    unset mssg

}

function display_error() {

    # call: display_error mssg
    local text

    if [[ "${DIALOG}" -ne 0 ]]; then

        text="\Z${bold}\Z${red}$1\Z${neutral}\Z${unbold}"
        text=$(printf "${text}" "$2")

        dialog_mssg "${text}" "${title_error}"


    elif [[ "${ZENITY}" -ne 0 ]]; then

        zenity_error "<span color=\"${red}\"><b>$1</b></span>" "$2"

    else

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; fi
        text="${esc_seq}${bold};${red}m$1${esc_seq}${neutral};${unbold}m"
        printf "${text}" "$2"

    fi

    write_file "log" "### Error: $1"
    unset text

}

function display_files() {

    write_file "log" "${NOW} ### $FUNCNAME: attempt to display files for choosing..."

    if [[ "${ZENITY}" -eq 1 ]]; then

        files=$( echos_files | zenity_list_files "${text_menu_files}" "${title_menu_files}" "${#MTD_NAME[@]}")

    fi

    if [[ "${DIALOG}" -eq 1 ]]; then

        echos_files

        files="$(cat /tmp/dialog_checklist_reply.tmp)"
        display_detected "files: $files"

    fi

    if [[ "${files}" ]]; then
        write_file "log" "### $FUNCNAME: Files choosed: ${files[*]}";
    fi

}

function display_menu() {

    write_file "log" "${NOW} ### $FUNCNAME: attempt to display menu..."

    while true; do
        choice=""

        if [[ "${ZENITY}" -ne 0 ]]; then

            choice=$( echos_menu | zenity_list "${text_welcome}" "${title_welcome}" "$(count ${MENU_NAME[@]})")

        elif  [[ "${DIALOG}" -ne 0 ]]; then

            #if [[ -f "${FILE_TMP}_menu.tmp" ]]; then rm -f "${FILE_TMP}_menu.tmp"; fi
            #if [[ -f "${FILE_TMP}" ]]; then rm -f "${FILE_TMP}"; fi

            echos_menu

            exec 3>&1;
            choice=$(dialog_menu "${text_welcome}" "${title_welcome}" "$(count ${MENU_NAME[@]})")
            exec 3>&-;

            #if [[ -f "${FILE_TMP}_menu.tmp" ]]; then rm -f "${FILE_TMP}_menu.tmp"; fi
            #if [[ -f "${FILE_TMP}" ]]; then rm -f "${FILE_TMP}"; fi

            unset menu

        else

            printf "\n${title_menu}\n"

            PS3="${text_welcome} "
            select menu in "${text_menu_description[@]}"; do
                if [[ "$REPLY" == "q" || "$REPLY" == "Q" ]]; then
                    choice="${MENU_NAME[${#MENU_NAME[*]}]}"
                elif [[ -z "${MENU_NAME[$REPLY]}" ]]; then
                    choice=""
                else
                    choice="${MENU_NAME[$REPLY]}"
                fi
                break
            done

            unset menu

        fi

        # if choice exists, then run-it!
        if [[ "$choice" ]]; then

            key=$(array_search "${choice}" "${MENU_NAME[@]}");

            if [[ -z "${key}" ]]; then unset choice; else "${choice}"; fi
            unset array key

            write_file "log" "### $FUNCNAME: choice: ${choice}"
        fi

    done

    if [[ $? -ne 0 ]]; then EXIT; fi

}

function display_mssg() {

    # call: display_mssg option text title sec
    #+ param sec is for DIALOG info
    local menu="$1" text="$2" title="$3" sec="$4"

    if [[ "${ZENITY}" -ne 0 ]]; then

        case "$menu" in
            i) zenity_info "${text}" "${title}" ;;
            n) zenity_notify "${text}" "${title}" ;;
            q) zenity_question "${text}" "${title}" ;;
        esac

    elif [[ "${DIALOG}" -ne 0 ]]; then

        case "$menu" in
            i)
                dialog_mssg "${text}" ;;
            q)
                dialog_yesno "${text}" "${title}"

                read=$(</tmp/dialog_yesno.tmp)
                if [[ -f /tmp/dialog_yesno.tmp ]]; then rm -rf /tmp/dialog_yesno.tmp; fi

            ;;
            *)  dialog_info "${text}" "${sec}" ;;
        esac

    else

        case "$menu" in
            q) echo -e "$2" "${text_yes_no}"; read ;;
            *) echo -e "$2" ;;
        esac

    fi

    write_file "log" "### Message: $2"

}

function echos_files() {

    write_file "log" "${NOW} ### $FUNCNAME: Attempt ones echos to choose files..."

    local -i i=0 j=1

    if [[ "${DIALOG}" -eq 1 ]]; then

        items=""
        for name in "${MTD_NAME[@]}"; do

            key=$(array_search "${name}" "${PART_DEFAULT[@]}");
            if [[ -n "$key" ]] ; then key="on"; else key="off"; fi

            items="${items} $j ${name} ${key}"

            let "i = $i + 1"; let "j = $i + 1"
            unset key

        done

        display_detected "items: ${items}"

        dialog_list_files "${text_menu_files}" "${title_menu_files}" "${items}" "$(count ${MTD_NAME[@]})"

        unset items

    fi

    if [[ "${ZENITY}" -eq 1 ]]; then

        #while [ $i -le $(count "${MTD_NAME[@]}") ]; do
        for name in "${MTD_NAME[@]}"; do

            key=$(array_search "${name}" "${PART_DEFAULT[@]}");
            if [[ -n "${key}" ]]; then echo TRUE; else echo FALSE; fi

            echo "${name}"
            echo "${MTD_SIZE[$i]}"
            echo "${MTD_ADDR[$i]}"
            echo "${MTD_MAP[$i]}"

            let "i = $i + 1";
            unset key

        done

    fi

    unset array i j

}

function echos_menu() {

    write_file "log" "${NOW} ### $FUNCNAME: Attempt ones echos to choose menu..."

    if [[ "${DIALOG}" -eq 1 ]]; then

        for name in "${MENU_NAME[@]}"; do

            menu+=("${name}" "${MENU_TEXT[${name}]}")
            #let "i = $i + 1";

        done

        #display_detected "menu: ${menu}"

    else

        for name in "${MENU_NAME[@]}"; do

            echo "${name}";
            echo "${MENU_TEXT[${name}]}";

            unset name

        done

    fi

}
