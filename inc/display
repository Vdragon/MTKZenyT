#!/bin/bash

if ! ${EXEC}; then exit; fi

function display_detected() {

    # call: display_detected mssg
    local mssg=$(printf "$1\n" "$2");

    if [[ "${DIALOG}" -ne 0 ]]; then

        if [[ "${esc_seq}" ]]; then esc_seq="\e["; neutral=0; fi
        echo -e "${esc_seq};3${green}m${mssg}${esc_seq};${neutral}m"
        #echo -e "\Z${bold}\Z${green}${mssg}\Z${neutral}\Z${unbold}"

    elif [[ "${ZENITY}" -ne 0 ]]; then

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; neutral=0; fi
        echo -e "${esc_seq};32m${mssg}${esc_seq};${neutral}m"

    else

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; fi
        echo -e "${esc_seq};${green}m${mssg}${esc_seq};${neutral}m"

    fi

    write_file "log" "### Detected: ${mssg}"

    unset mssg

}

function display_error() {

    # call: display_error mssg
    local text

    if [[ "${DIALOG}" -ne 0 ]]; then

        text="\Z${bold}\Z${red}$1\Z${neutral}\Z${unbold}"
        text=$(printf "${text}" "$2")

        dialog_mssg "${text}" "${title_error}"


    elif [[ "${ZENITY}" -ne 0 ]]; then

        zenity_error "<span color=\"${red}\"><b>$1</b></span>" "$2"

    else

        if [[ -z "${esc_seq}" ]]; then esc_seq="\e["; fi
        text="${esc_seq}${bold};${red}m$1${esc_seq}${neutral};${unbold}m"
        printf "${text}" "$2"

    fi

    write_file "log" "### Error: $1"
    unset text

}

function display_feature_disable() {

    mssg="$(printf "${text_feature_disable}" "$1")"
    display_error "${mssg}"

}

function display_feature_with_gui() {

    mssg="${text_feature_disable}${text_choose_gui}${CONFIG}\n${text_use_otherwise_help}"
    mssg="$(printf "${mssg}" "$1")"
    display_error "${mssg}"

}

function display_files() {

    write_file "log" "${NOW} ### $FUNCNAME: attempt to display files for choosing..."

    files=""

    if [[ "${ZENITY}" -eq 1 ]]; then

        files=$( echos_files | zenity_list_files "${text_menu_files}" "${title_menu_files}" "${#MTD_NAME[@]}")

    fi

    if [[ "${DIALOG}" -eq 1 ]]; then

        echos_files

        files=$(<${SCRIPT_TMP_DIR}checklist_reply.tmp)
        display_detected "files: $files"

    fi

    if [[ -z "${files}" ]]; then
        display_error "${text_error_not_files}";
        display_files
    else
        write_file "log" "### $FUNCNAME: Files choosed: ${files[*]}";
    fi

}

function display_help() {

    mssg="$(<${DIR_LANG}/help.${lang})"

    printf "${mssg}\n" "${0##*/}"

}

function display_menu() {

    write_file "log" "${NOW} ### $FUNCNAME: attempt to display menu..."

    while true; do
        choice=""
        local info_mode="" info_product="" info_text=""

        case "${MODE}" in
            "${MENU_REBOOT[0]}") info_mode="${text_menu_reboot_RECOVERY}" ;;
            "${MENU_REBOOT[1]}") info_mode="${text_menu_reboot_SYSTEM}" ;;
        esac

        if [[ "${ZENITY}" -ne 0 ]]; then

            info_product="$(printf "<span color=\"${green}\"><b>${text_device} - ${info_mode}</b></span>" "${ANDROID_SERIAL}" "${MODE}")"
            info_text="$(printf "%s" "${info_product}\n${text_menu_action}")"

            choice=$( echos_menu | zenity_list "${info_text}" "${title_welcome}" "$(count ${MENU_NAME[@]})")

        elif  [[ "${DIALOG}" -ne 0 ]]; then

            echos_menu

            info_product="$(printf "${text_device} - ${text_device_mode}" "${ANDROID_SERIAL}" "${info_mode}")"
            info_text="$(printf "%s" "${info_product}\n${text_menu_action}")"

            #exec 3>&1;
            #choice=$(dialog_menu "${info_text}" "${title_welcome}" "$(count ${MENU_NAME[@]})")
            #exec 3>&-;

            dialog_menu "${info_text}" "${title_welcome}" "$(count ${MENU_NAME[@]})"
            choice=$(<${SCRIPT_TMP_DIR}menu.tmp)

            unset menu

        else

            printf "\n${title_menu}\n"

            PS3="${text_menu_action} "
            select menu in "${MENU_NAME[@]}"; do
                if [[ "${REPLY}" == "q" || "${REPLY}" == "Q" ]]; then
                    choice="EXIT"
                else
                    choice="${menu}"
                fi
                break
            done

            unset menu

        fi

        write_file "log" "$FUNCNAME: choice=${choice}"
        unset info_mode info_product info_text

        # if choice exists, then run-it!
        if [[ "$choice" ]]; then

            key=$(array_search "${choice}" "${MENU_NAME[@]}");

            if [[ -z "${key}" ]]; then unset choice; else "${choice}"; fi
            unset array key

        fi
        write_file "log" "### $FUNCNAME: choice: ${choice}"

    done

    if [[ $? -ne 0 ]]; then EXIT; fi

}

function display_mssg() {

    # call: display_mssg option text title sec
    #+ param sec is for DIALOG info
    local menu="$1" text="$2" title="$3" sec="$4"

    if [[ "${ZENITY}" -ne 0 ]]; then

        case "$menu" in
            i) zenity_info "${text}" "${title}" ;;
            n) zenity_notify "${text}" "${title}" ;;
            p) zenity_progress "${text}" "${title}" ;;
            q) zenity_question "${text}" "${title}" ;;
        esac

    elif [[ "${DIALOG}" -ne 0 ]]; then

        case "$menu" in
            i)
                dialog_mssg "${text}" ;;
            p)
                dialog_progress "${text}" "${title}" ;;
            q)
                dialog_yesno "${text}" "${title}"

                read=$(<${SCRIPT_TMP_DIR}yesno.tmp)

            ;;
            *)  dialog_info "${text}" "${sec}" ;;
        esac

    else

        case "$menu" in
            q) echo -e "$2" "${text_yes_no}"; read ;;
            *) echo -e "$2" ;;
        esac

    fi

    write_file "log" "### Message: $2"

}

function display_unknown_option() {

    mssg="$(printf "${text_error_option_name}" "$1")"
    mssg="${mssg}\n ${text_use_help}\n ${text_exit}\n"
    display_error "${mssg}"

}

function echos_files() {

    write_file "log" "${NOW} ### $FUNCNAME: Attempt ones echos to choose files..."

    local -i i=0 j=1

    if [[ "${DIALOG}" -eq 1 ]]; then

        local items=""
        for name in "${MTD_NAME[@]}"; do

            key=$(array_search "${name}" "${PART_DEFAULT[@]}");
            if [[ -n "$key" ]] ; then key="on"; else key="off"; fi

            items="${items} $j ${name} ${key}"

            let "i = $i + 1"; let "j = $i + 1"
            unset key

        done

        display_detected "items: ${items}"

        dialog_list_files "${text_menu_files}" "${title_menu_files}" "${items}" "$(count ${MTD_NAME[@]})"

        unset items

    fi

    if [[ "${ZENITY}" -eq 1 ]]; then

        for name in "${MTD_NAME[@]}"; do

            key=$(array_search "${name}" "${PART_DEFAULT[@]}");
            if [[ -n "${key}" ]]; then echo TRUE; else echo FALSE; fi
            unset key

            echo "${name}"
            echo "${MTD_SIZE[$i]}"
            echo "${MTD_ADDR[$i]}"
            echo "${MTD_MAP[$i]}"

            let "i = $i + 1";

        done

    fi

    unset array i j

}

function echos_menu() {

    write_file "log" "${NOW} ### $FUNCNAME: Attempt ones echos to choose menu..."

    if [[ "${DIALOG}" -eq 1 ]]; then

        for name in "${MENU_NAME[@]}"; do

            menu+=("${name}" "${MENU_TEXT[${name}]}")

        done

        #display_detected "menu: ${menu}"

    else

        for name in "${MENU_NAME[@]}"; do

            echo "${name}";
            echo "${MENU_TEXT[${name}]}";

        done

    fi

}

function echos_menu_reboot() {

    write_file "log" "${NOW} ### $FUNCNAME: Attempt ones echos to choose menu..."

    if [[ "${DIALOG}" -eq 1 ]]; then

        for name in "${MENU_REBOOT[@]}"; do

            menu+=("${name}" "${MENU_TEXT_REBOOT[${name}]}")

        done

        #display_detected "menu: ${menu}"

    else

        for name in "${MENU_REBOOT[@]}"; do

            echo "${name}";
            echo "${MENU_TEXT_REBOOT[${name}]}";

        done

    fi

}
