#!/bin/bash

function MTKZenyTux() {

    echo -e "#################################"
    echo -e "### ${title_welcome} ###"
    echo -e "#################################"

    test_config_file

    write_file "log" "#################################################"
    write_file "log" "### ### ### ${title_welcome} ### ### ###"
    write_file "log" "#################################################"

    verify_installed

    detect_device

    display_menu

}

function BACKUP() {

    write_file "log" "${now} ### $FUNCNAME: Will try to your backup device !"

    if [[ "$(adb_whoami)" == "root" ]]; then

        # obtain dir to save
        if [[ -z "${DIR_SVG}" ]]; then

            #DIR_SVG=$(choose_directory "d" "${title_dir_svg}")
            choose_directory "d" "${title_dir_svg}" && DIR_SVG="${dir}"
            write_file "cfg" "DIR_SVG" "${DIR_SVG}"

        fi

        write_file "log" "$now *** $FUNCNAME: DIR_SVG=${DIR_SVG}"

        # mkdir dated into DIR_SVG !
        if [[ -d "${DIR_SVG}" ]]; then

            make_dir_dated

            adb_read_partitions

            if [[ -f "${FILE_PARAM}" ]]; then

                file_to_array_dynamic

                display_files

                #convert_str_to_array
                if [[ "${files}" ]]; then
                    files=($(explode " " "${files}"))
                fi

                adb_save_partitions

            fi

        fi

    else

        mssg=$(printf "%s" "${text_su_inactive}\n${text_unroot_stop}\n")
        display_error "${mssg}"

    fi

}

function CUSTOM() {

    echo "Will Flash custom!"

}

function EXIT() {

    display_mssg "n" "${text_goodbye}" "${title_goodbye}"
    destruct
    exit 0

}

function FLASH() {

    echo "Will flash";

}


function REBOOT() {

    adb_reboot

}

function ROOT() {

    root_to_recovery

}

function UNROOT() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        unroot_to_recovery

    else

        unroot_to_system

    fi

}

function array_key_exists() {

    # equivalent to PHP array_key_exists
    # call: if [[ $(array_key_exists key array) ]]; then echo "key exists!"; fi

    local key="$1" IFS=" "; shift; read -a array <<< "$@"
    if [[ "${array[$key]}" ]]; then echo 0; return 1; fi

    unset array key IFS

}

function array_search() {

    # equivalent to PHP array_search
    # call: array_search needle array

    local needle="$1" IFS=" "; shift; read -a array <<< "$@"

    for (( i=0; i < $(count "${array[*]}"); i++ )); do
        if [[ "${array[$i]}" == "${needle}" ]]; then echo "$i"; fi
    done
    return 1

    unset array needle IFS

}

function choose_directory() {

    #display_mssg "n" "Choose an directory, please:"

    if [[ "${DIALOG}" -ne 0 ]]; then

        case "$1" in
            "d") dir=$(dialog_select_dir "$2") ;;
            "f") dir=$(dialog_select_file "$2") ;;
        esac

    elif [[ "${ZENITY}" -ne 0 ]]; then

        dir=$(zenity_directory "$1" "$2");

    else

        read -p "$2" dir

    fi

    write_file "log" "$now ### $FUNCNAME: ${dir}"

}

function chr() {

    [ "$1" -lt 256 ] || return 1
    printf "%s" "\\$(printf '%03o' "$1")"

}

function convert_str_to_array() {

    write_file "log" "${now} ### $FUNCNAME: string: ${files}"

    x=0
    for file in $files; do files[$x]="$file"; let "x = $x + 1"; done
    unset x

    write_file "log" "${now} ### $FUNCNAME: array: ${files[*]}"

}

function count() {

    # egual PHP count
    # call: count array
    local IFS=" "; read -a array <<< "$*"

    if [[ -n "${#array[@]}" ]]; then echo "${#array[*]}"; else return 1; fi

    unset IFS array

}

function destruct() {

    write_file "log" "$now ### $FUNCNAME: Destruct variables"

    if [[ "${DIALOG}" -eq 1 ]]; then rm "${FILE_TMP}"; fi

    unset DIALOG FILE_TMP ZENITY
    unset archive choice mssg

    write_file "log" "##################################################"
    write_file "log" "### ### ### $0 ENDED ! ### #### ###"
    write_file "log" "##################################################"

}

function detect_device() {

    display_mssg "n" "${text_detect_dev}"; sleep 1

    for (( x=0; x < ${#VID[@]} ; x++ )); do
        lsusb=$(lsusb | egrep "${VID[$x]}")

        if [[ "${lsusb}" ]]; then
            pid=${PID[$x]}
            vid=${VID[$x]}
            break;
        fi

        unset lsusb
    done

    if [[ -z "${pid}" ]]; then

        display_error "${text_dev_unrecognized}\n"
        display_mssg "i" "${text_exit}"

        EXIT

    else

        display_detected "${text_VendorID}" "${vid}"
        display_detected "${text_ProductID}" "${pid}"

        if [[ "${vid}" == "${VID[0]}" ]]; then
            display_detected "Mode: Recovery"
        else
            display_detected "Mode: Session"
        fi

    fi

    write_file "log" "$now ### $FUNCNAME: VID:${vid} and PID:${pid} "

}

function dl_file() {

    # call: dl_file URL FILE_NAME

    mssg=$(printf "${text_dl_file}\n" "$1"); display_mssg "i" "${mssg}"

    curl "$1" > "$2"
    if [[ $? -ne 0 ]]; then
        mssg=$(printf "${text_error_dl}" "$2")
        display_error "${mssg}"

        write_file "log" "$now ### $FUNCNAME: Error to download file: $2 - from: $1"

        EXIT
    fi

}

function dl_yourself() {

    # call: dl_yoursel FILE_NAME

    mssg=$(printf "${text_dl_yourself}\n" "$1")
    mssg="${mssg} ${text_exit_relaunch}"
    display_mssg "i" "${mssg}"

    write_file "log" "$now ### $FUNCNAME: Need to download yourself the file: $1"

    EXIT

}

function explode() {

    # call: array=("$(explode $delimiter $string)")
    # equivalent PHP explode
    local delimiter="$1" string="$2"
    write_file "log" "${now} ### $FUNCNAME: string: ${string}"

    local IFS="${delimiter}"; shift; read -a array <<< "${string}"

    if [[ "${array[*]}" ]]; then echo "${array[*]}"; else return 1; fi

    write_file "log" "${now} ### $FUNCNAME: array: ${array[*]}"

}

function extract_archive_zip() {

    if [[ -f "${FILE_SSU_ZIP}" ]]; then

        mssg=$(printf "\n${text_unzip}\n" "${FILE_SSU_ZIP}")
        display_mssg "i" "${mssg}"
        unzip "${DIR_Tools}/UPDATE-SuperSU-${version}" -d "${DIR_Tools}/UPDATE-SuperSU-${version}"

        if [[ $? -eq 0 ]]; then
            write_file "log" "$now ### $FUNCNAME: Unzip OK: ${DIR_Tools}/UPDATE-SuperSU-${version}"
        else
            write_file "log" "$now ### $FUNCNAME: Unzip KO: ${DIR_Tools}/UPDATE-SuperSU-${version}"
        fi

    fi

}

function extract_info_system() {

    if [[ -f "${FILE_PARAM}" ]]; then

        CMDLINE=$(egrep "^$1" "${FILE_PARAM}" | sed 's/\r$//')

        local IFS=": "; shift; read -a params <<< "${CMDLINE}"

        info_map["$1"]=${params[4]}
        mssg=$(printf "%s" "${text_system_info}${info_map[$1]}\n")
        display_mssg "n" "${mssg}"

        write_file "log" "$now ### $FUNCNAME: $1 == ${info_map[$1]}"

    fi

}

function file_to_array_dynamic() {

    x=0
    # read file param into array
    while read line; do

        if [[ "$x" -ge 1 && "$x" -le 22 ]]; then

            local IFS=" "; shift; read -a mtd <<< "$(echo "${line}" | sed 's/\r$//' | tr -s ' ')"

            ## create arrays dynamic 'mtd_$info_name[value]'
            #for (( j=0; j < ${#info_name[@]}; j++)) {

                #idx="mtd_${info_name[$j]}[$x]"
                #declare -a "${idx}"="${mtd[$j]}"

            #}

            mtd_name[$x]="${mtd[0]}"
            mtd_size[$x]="${mtd[1]}"
            mtd_addr[$x]="${mtd[2]}"
            mtd_type[$x]="${mtd[3]}"
            mtd_map[$x]="${mtd[4]}"
            mtd_size_dec[$x]=$(hexdec "${mtd_size[$x]}")
            mtd_addr_dec[$x]=$(hexdec "${mtd_addr[$x]}")

            unset mtd

        fi

        let "x = $x + 1";

    done < "${FILE_PARAM}"
    unset x

    write_file "log" "$now ### $FUNCNAME: Create mtd array dynamic: mtd_name[ ${mtd_name[*]} ]"

}

function get_info_system() {

    # call: get_info_system partition_name

    adb_read_partitions

    extract_info_system "$1"

}

function hexdec() {

    #hex="${1#*x}"
    #echo "ibase=16;obase=A;${hex}" | bc
    #bc <<< "ibase=16;obase=A;${hex}"
    #unset hex
    echo "$(($1))"

}

function in_array() {

    # equivalent to PHP in_array
    # call: in_array needle array

    local i=0 needle="$1" IFS=" "; shift; read -a array <<< "$@"

    while [ $i -le ${#array[@]} ]; do
        if [[ "${array[$i]}" == "${needle}" ]]; then echo 0; fi # true
        let "i = $i + 1"
    done
    return 1

    unset i needle IFS array

}

function make_dir_dated() {

    if [[ -d "${DIR_SVG}" ]]; then

        DIR_SVG_DATED="${DIR_SVG}/${vid}:${pid}_$now"
        mkdir "${DIR_SVG_DATED}" && display_detected "${text_dir_ok}" "${DIR_SVG_DATED}"

        write_file "log" "$now ### $FUNCNAME: DIR_SVG_DATED: ${DIR_SVG_DATED}"

    fi

}

function modify_system() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        adb_root_system

    fi

}

function read_config() {

    search=$(grep "$1" "${PWD}/${config}")
    if [[ -n "${search}" ]]; then

        #if [[ "$(grep "^DIR" <<< "${search}")" || "$(grep "^BCKP" <<< "${search}")" ]]; then
        s1=$(grep "^DIR" <<< "${search}"); s2=$(grep "^BCKP" <<< "${search}")
        if [[ "$s1" || "$s2" ]]; then

            # if ultimate character of search isn't '/' and not '=', add-it '/'
            s3=$(grep "./$" <<< "${search}"); s4=$(grep ".=$" <<< "${search}")
            if [[ ! "$s3" && ! "$s4" ]]; then
                search="${search}/";
            fi
            unset s3 s4

        fi
        unset s1 s2

        echo "${search#*=}"

    fi
    unset search

}

function reboot_recovery() {

    if [[ "${vid}" != "${VID[0]}" ]]; then

        display_error "\n${text_dev_not_recovery}\n"
        display_mssg "q" "${text_ask_restart}"

        if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

            steps_to_recovery

        elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

            mssg="${text_reboot_yoursel}\n${text_exit_reboot}"
            display_mssg "i" "${mssg}"

            EXIT

        else

            while true; do
                case $REPLY in
                    y|Y|o|O)
                        steps_to_recovery
                        break
                        ;;
                    n|N)
                        mssg="${text_reboot_yoursel}\n${text_exit_reboot}"
                        display_mssg "i" "${mssg}"

                        EXIT
                    ;;
                    *)
                        display_error "${text_choice_invalid}"
                        read
                    ;;
                esac
            done

        fi

    else

        display_mssg "i" "\n${text_into_recovery}\n"; sleep 1

    fi

}

function reboot_system() {

    display_mssg "i" "${text_verif_errors}"

    display_mssg "q" "${text_ask_reboot_system}"

    if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

        adb_reboot_system

    elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

        mssg=$(printf "${text_reboot_yourself}\n${text_exit}")
        display_mssg "i" "${mssg}"

        EXIT

    else

        while true; do
            case $REPLY in
                y|Y|o|O)
                    adb_reboot_system
                    break
                ;;
                n|N)
                    mssg=$(printf "${text_reboot_yourself}\n${text_exit}")
                    display_mssg "i" "${mssg}"

                    EXIT
                ;;
                *)
                    display_error "${text_choice_invalid}"
                    read
                ;;
            esac
        done

    fi

}

function root_to_recovery() {

    verify_ssu_exists

    reboot_recovery

    get_info_system "android"

    modify_system

    reboot_system

}

function save_rom() {

    if [[ "${ZENITY}" -ne 0 ]]; then
        (
            adb_save_partitions
        ) | zenity_progress "${text_save_tablet}" "${title_save_tablet}"
    else
        adb_save_partitions
    fi

}

function steps_to_recovery() {

    adb_reboot_recovery

    read -p "${text_press_key}" -n1 -s
    echo " "

    detect_device

    choice="UNROOT"
    #$0

}

function test_config_file() {

    display_mssg "n" "\n${text_detect_cfg}"

    if [[ -f "${config}" ]]; then

        LOG=$(read_config "LOG") && display_detected "LOG=${LOG}"
        BCKP_PHONE=$(read_config "BCKP_PHONE") && display_detected "BCKP_PHONE=${BCKP_PHONE}"
        CFG=1 && display_detected "CFG=1"
        DIR_SVG=$(read_config "DIR_SVG") && display_detected "DIR_SVG=${DIR_SVG}"
        GUI=$(read_config "GUI") && display_detected "GUI=${GUI}"

    fi

}


function unroot_to_recovery() {

    reboot_recovery

    # manage datas into /data
    #get_info_system "usrdata"

    #if [[ -z $(adb_verify_mount "data") ]]; then mount "data"; fi
    if [[ -z $(adb_verify_mount "data") ]]; then adb_mount_partition "data"; fi

    adb_delete_su_datas

    adb_umount_partition "data"

    # manage datas into /system
    #get_info_system "android"

    #if [[ -z $(adb_verify_mount "system") ]]; then mount "system"; fi
    if [[ -z $(adb_verify_mount "system") ]]; then adb_mount_partition "system"; fi

    adb_delete_supersu

    adb_delete_su_system

    adb_umount_partition "system"

    mssg=$(printf "${text_unroot_end}\n${text_verify_errors}\n")
    display_mssg "n" "${mssg}"

}

function unroot_to_system() {

    ##id=$(${adb} shell su -c busybox id -un | sed 's/\r$//'); display_detected "${id}"
    whoami="$(adb_whoami)"; display_detected "id: ${whoami}"

    if [[ "${whoami}" == "root" ]]; then

        adb_mount_partition "w"

        adb_delete_su_datas

        adb_delete_supersu

        adb_delete_su_system

        mssg=$(printf "${text_unroot_end}\n${text_verify_errors}\n")
        display_mssg "n" "${mssg}"

        sleep 3

        adb_mount_partition "r"

    else

        mssg=$(printf "%s" "${text_su_inactive}\n${text_unroot_stop}\n")
        display_error "${mssg}"

    fi

    unset id

}

function verify_ssu_exists() {

    if [[ ! -f "${DIR_SSU}" ]]; then

        mssg=$(printf "\n${text_app_inexistant}\n" "${SuperSU}")
        mssg="${mssg}"$(printf "${text_app_dl}\n" "${SuperSU}" "${URL_SUPERSU}")
        mssg="${mssg}"$(printf "\n${text_ask_dl} ${text_yes_no}")

        display_mssg "q" "${mssg}"

        if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

            dl_file "${DL_SUPERSU}" "${FILE_SSU_ZIP}"

        elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

            dl_yourself "${SuperSU}"

        else

            while true; do
                case $REPLY in
                    y|Y|o|O)
                        dl_file "${DL_SUPERSU}" "${FILE_SSU_ZIP}"
                        break
                        ;;
                    n|N)
                        dl_yourself "${SuperSU}"
                    ;;
                    *)
                        display_error "${text_choice_invalid}"
                        read
                    ;;
                esac
            done

        fi

        extract_archive_zip

    else

        display_detected "\n${text_ssu_exists}"

    fi

}

function verify_installed() {

    mssg=$(printf "\n${text_verify_installed}\n")
    display_mssg "i" "${mssg}"
    sleep 1

    array=("${guis[@]}");

    if [[ -z "$(in_array "${GUI}")" ]]; then

        # verify if dialog is installed
        if [[ "${GUI}" == "dialog" && -x $(which dialog) ]]; then
            DIALOG=1
            ZENITY=0

            #FILE_TMP="/tmp/MTKShellDialog.tmp"
            #touch "${FILE_TMP}"
            #trap 'rm -f "${FILE_TMP}"' 0 1 2 3 5 15

            dialog=$(which dialog)

            display_detected "${text_ok_tools}" "Dialog"
            write_file "log" "$now *** $FUNCNAME: Dialog: Yes!"
        fi

        # verify if zenity is installed.
        if [[ "${GUI}" == "zenity" && -x $(which zenity) ]]; then
            DIALOG=0
            ZENITY=1

            zenity=$(which zenity)

            display_detected "${text_ok_tools}" "Zenity"
            write_file "log" "$now *** $FUNCNAME: Zenity: Yes!"
        fi

        #DIALOG=1
        #ZENITY=0

    fi

    # adb
    if [[ ! -x $(which adb) ]]; then
        display_error "\n${text_error_not_tools}" "ADB"
        write_file "log" "$now *** $FUNCNAME: adb: Boo!"
        EXIT
    else
        display_detected "${text_ok_tools}" "ADB"
        write_file "log" "$now *** $FUNCNAME: adb: Yes!"
        adb=$(which adb)
    fi

}


function write_file() {

    case $1 in
        "cfg") sed -i -e "#$2=.*# s##$2=$3#g" "${config}" ;;
        "log") [[ "${LOG}" -eq 1 ]] && echo "$2" >> "${PWD}/logs/${day}.log" ;;
    esac

}
