#!/bin/bash

function MTKZenyTux() {

    echo -e "${title_welcome}\n"

    detect_device

    test_config_file

    verify_installed

    display_menu

}

function EXIT() {

    display_mssg "n" "${text_goodbye}" "${title_goodbye}"
    destruct
    exit 0

}

function ROOT() {

    root_to_recovery

}

function UNROOT() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        unroot_to_recovery

    else

        unroot_to_system

    fi

}

function adb_mount_system() {

    case "$1" in
        "r") printf "${text_mount_ro}\n" "system"; io="ro" ;;
        "w") printf "${text_mount_rw}\n" "system"; io="rw" ;;
    esac

    ${adb} shell su -c "mount -o remount,${io} /system"

    if [[ $? -eq 0 ]]; then

        case "${io}" in
            "ro") mode="read-only" ;;
            "rw") mode="read and write" ;;
        esac

        printf "${text_device_mode}\n" "${mode}"; sleep 1
        unset mode

    else

        display_error "${text_mount_error}"
        exit 1;

    fi

    unset io

}

function destruct() {
    write_file "log" "$now ### Destruction des variables"

    [[ $DIALOG -eq 1 ]] && rm "${FILE_TMP}"

    unset DIALOG FILE_TMP ZENITY
    unset archive choice

    write_file "log" "### ### ###"
}

function detect_device() {

    display_detected "${text_detect_dev}"; sleep 1

    for (( x=0; x < ${#VID[@]} ; x++ )); do
        lsusb=$(lsusb | egrep "${VID[$x]}")

        if [[ "${lsusb}" ]]; then
            pid=${PID[$x]}
            vid=${VID[$x]}
            break;
        fi

        unset lsusb
    done

    if [[ -z "${pid}" ]]; then

        display_error "${text_dev_unrecognized}\n"
        display_mssg "i" "${text_exit}"
        exit 1

    else

        display_detected "${text_VendorID}" "${vid}"
        display_detected "${text_ProductID}" "${pid}"

        if [[ "${vid}" == "${VID[0]}" ]]; then
            display_detected "Mode: Recovery"
        else
            display_detected "Mode: Session"
        fi

    fi

}

function extract_archive_zip() {

    if [[ -f "${FILE_SSU_ZIP}" ]]; then

        mssg=$(printf "\n${text_unzip}\n" "${FILE_SSU_ZIP}")
        display_mssg "i" "${mssg}"
        unzip "${DIR_Tools}/UPDATE-SuperSU-${version}" -d "${DIR_Tools}/UPDATE-SuperSU-${version}"

        if [[ $? -eq 0 ]]; then
            write_file "log" "$now ### Unzip OK: ${DIR_Tools}/UPDATE-SuperSU-${version}"
        else
            write_file "log" "$now ### Unzip KO: ${DIR_Tools}/UPDATE-SuperSU-${version}"
        fi

    fi

}

function extract_info_system() {

    if [[ -f "${FILE_PARAM}" ]]; then

        CMDLINE=$(egrep "^$1" "${FILE_PARAM}" | sed 's/\r$//')

        OFS="$IFS"
        IFS=": " read -a params <<< "${CMDLINE}"

        info_map["$1"]=${params[4]}

        mssg=$(printf "%s" "${text_system_info}${info_map[$1]}\n")
        display_mssg "n" "${mssg}"

        write_file "log" "$now ### Info extract system: $1 == ${info_map[$1]}"

        IFS="${OFS}"

        unset OFS

    fi

}

function get_info_system() {

    ${adb} shell cat /proc/dumchar_info > "${FILE_PARAM}";

    extract_info_system "$1"

}


function get_key() {
    # egual to PHP array_search

    for (( i=0; i < ${#array[*]}; i++ )); { [[ "${array[$i]}" = "$1" ]] && echo $i; }

}

function modify_system() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        mssg=$(printf "${text_mount_rw}" "system")
        display_mssg "i" "${mssg}"

        #${adb} shell mount "${info_map['android']}" /system
        if [[ -z $(${adb} shell mount | busybox egrep system) ]]; then mount "system"; fi

        #display_mssg "n" "cp busybox into /tmp"
        #${adb} shell cp "${SYS_BIN}busybox" /tmp/busybox
        #${adb} shell chmod 0755 /tmp/busybox
        #${adb} shell chown 0:0 /tmp/busybox
        #${adb} shell busybox umount /system

        #display_mssg "n" "mount system by /tmp/busybox"
        #${adb} shell /tmp/busybox mount /system

        #${adb} shell "if [[ ! -d /system/bin/.ext ]]; then mkdir /system/bin/.ext; fi"
        #${adb} shell chmod 0777 /system/bin/.ext
        #${adb} shell chown 0:0 /system/bin/.ext
        sleep 1

        display_mssg "i" "${text_supersu_cp}${SYS_APP}"
        ${adb} push "${DIR_SSU}" "${SYS_APP}"
        display_mssg "i" "${text_supersu_chmod}${SYS_APP}"
        ${adb} shell chmod 0644 "${SYS_APP}${SuperSU}"
        ${adb} shell chown 0:0 "${SYS_APP}${SuperSU}"
        sleep 1

        display_mssg "i" "${text_su_cp}${SYS_BIN}"
        ${adb} push "${DIR_SU}" "${SYS_BIN}"
        #${adb} shell cp "${SYS_BIN}${SU}" "${SYS_BIN}daemonsu"
        #${adb} shell cp "${SYS_BIN}${SU}" "/system/bin/.ext/.${SU}"
        sleep 1

        #display_mssg "i" "Verify ${SYS_ETC}init.d and create if not exists!"
        #${adb} shell "if [[ ! -d '${SYS_ETC}init.d' ]]; then mkdir '${SYS_ETC}init.d'; fi"
        #${adb} push "${DIR_SSUD}" "${SYS_ETC}init.d"

        #${adb} shell chmod 0755 "${SYS_ETC}init.d/${SSUD}"
        #${adb} shell chown 0:0 "${SYS_ETC}init.d/${SSUD}"

        #${adb} shell "if [[ ! -f '${SYS_ETC}.installed_su_daemon' ]]; then touch '${SYS_ETC}.installed_su_daemon'; fi"
        #${adb} shell "echo 1 > ${SYS_ETC}.installed_su_daemon"

        #${adb} shell chmod 0644 "${SYS_ETC}.installed_su_daemon"
        #${adb} shell chown 0:0 "${SYS_ETC}.installed_su_daemon"

        display_mssg "i" "chmod and chown ${SYS_BIN}${SU}"
        API=$(${adb} shell egrep ro.build.version.sdk /system/build.prop | dd bs=1 skip=21 count=2)
        echo "API: ${API}"
        if [[ "${API}" -gt 17 ]]; then
            echo "API > 17"
            ${adb} shell chmod 0755 "${SYS_BIN}${SU}"
            #${adb} shell chmod 0755 "/system/bin/.ext/.${SU}"
        else
            echo "API <= 17"
            #${adb} shell chmod 06755 "${SYS_BIN}${SU}"
            ${adb} shell chmod 06755 "/system/xbin/su"
            #${adb} shell chmod 06755 "/system/bin/.ext/.${SU}"
        fi
        unset API
        #${adb} shell chmod 0755 "${SYS_BIN}daemonsu"

        ${adb} shell chown 0:0 "${SYS_BIN}${SU}"
        #${adb} shell chown 0:0 "/system/bin/.ext/.${SU}"

        ${adb} shell "if [[ ! -h '/system/bin/${SU}' ]]; then ln -s ${SYS_BIN}${SU} /system/bin/${SU}; fi"

        #${adb} shell "${SYS_BIN}${SU} --install"

        #${adb} shell chmod 04755 /system/xbin/busybox
        #${adb} shell chown 0:0 /system/xbin/busybox
        #${adb} shell /system/xbin/busybox --install -s /system/xbin

        #display_mssg "n" "rm /tmp/busybox"
        #${adb} shell /tmp/busybox umount /system
        #${adb} shell rm -f /tmp/busybox
        ${adb} shell busybox umount /system
        sleep 1

        mssg=$(printf "${text_SSU_installed}" "${version}")
        display_mssg "i" "${mssg}"

    fi

}

function mount() {

    if [[ "${vid}" != "${VID[0]}" ]]; then

        display_mssg "i" "\n${text_mount_try}\n${text_see_phone}\n"; sleep 1

        adb_mount_system "w"

    else

        #key=$(get_key "$1")
        #${adb} shell mount "${info_map[$1]}" "/${PART_TEXT[$key]}"
        #unset key
        ${adb} shell busybox mount "$1"

    fi

}

function read_config() {

    search=$(egrep "$1" "${config}")
    [[ -n "${search}" ]] && echo "${search#*=}"
    unset search

}

function reboot_recovery() {

    if [[ "${vid}" != "${VID[0]}" ]]; then

        display_error "\n${text_dev_not_recovery}\n"
        display_mssg "q" "${text_ask_restart}"

        if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

            display_mssg "i" "${text_reboot_recovery}"; sleep 1
            ${adb} reboot recovery
            read -p "${text_press_key}" -n1 -s
            echo " "
            detect_device
            choice="UNROOT"
            #$0

        elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

            display_mssg "i" "${text_reboot_yoursel}"
            display_mssg "n" "${text_exit_reboot}"
            exit 1

        else

            while true; do
                case $REPLY in
                    y|Y|o|O)
                        display_mssg "i" "${text_reboot_recovery}"; sleep 1
                        ${adb} reboot recovery
                        read -p "${text_press_key}" -n1 -s
                        echo " "
                        detect_device
                        choice="UNROOT"
                        #$0
                        break
                        ;;
                    n|N)
                        display_mssg "i" "${text_reboot_yoursel}"
                        display_mssg "n" "${text_exit_reboot}"
                        exit 1
                    ;;
                    *)
                        display_error "${text_choice_invalid}"
                        read
                    ;;
                esac
            done

        fi

    else

        display_mssg "i" "\n${text_into_recovery}\n"; sleep 1

    fi

}

function reboot_system() {

    display_mssg "i" "${text_verif_errors}"

    display_mssg "q" "${text_ask_reboot_system}"

    if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

        mssg=$(printf "${text_goodbye_info}\n${text_goodbye}")
        display_mssg "i" "${mssg}"
        ${adb} reboot

    elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

        mssg=$(printf "${text_exit}\n${text_reboot_yourself}")
        display_mssg "i" "${mssg}"
        exit 1

    else

        while true; do
            case $REPLY in
                y|Y|o|O)
                    mssg=$(printf "${text_goodbye_info}\n${text_goodbye}")
                    display_mssg "i" "${mssg}"
                    ${adb} reboot
                    break
                ;;
                n|N)
                    mssg=$(printf "${text_exit}\n${text_reboot_yourself}")
                    display_mssg "i" "${mssg}"
                    exit 1
                ;;
                *)
                    display_error "${text_choice_invalid}"
                    read
                ;;
            esac
        done

    fi

}

function root_to_recovery() {

    verify_ssu_exists

    reboot_recovery

    get_info_system "android"

    modify_system

    reboot_system

}


function test_config_file() {

    if [[ -f "${config}" ]]; then
        #CFG=1
        #display_detected "${text_config_file_exists}"
        LOG=$(read_config "LOG") && display_detected "LOG=${LOG}"
    fi

}


function unroot_to_recovery() {

    reboot_recovery

    # manage datas into /data
    get_info_system "usrdata"

    if [[ -z $(${adb} shell mount | busybox egrep data) ]]; then mount "data"; fi

    ${adb} shell "find ./data/app/ -name com.noshufou.android.su-* -exec rm -f {} \;"
    ${adb} shell "find ./data/app/ -name com.koushikdutta.superuser-* -exec rm -f {} \;"
    ${adb} shell "find ./data/app/ -name com.mgyun.shua.su-* -exec rm -f {} \;"
    ${adb} shell "find ./data/app/ -name *eu.chainfire.supersu* -exec rm -f {} \;"

    ${adb} shell "find ./data/app-lib/ -name *eu.chainfire.supersu* -exec rm -rf {} \;"

    ${adb} shell "find ./data/data/ -name *eu.chainfire.supersu* -exec rm -rf {} \;"

    ${adb} shell "find ./data/dalvik-cache/ -name *com.noshufou.android.su* -exec rm -f {} \;"
    ${adb} shell "find ./data/dalvik-cache/ -name *com.koushikdutta.superuser* -exec rm -f {} \;"
    ${adb} shell "find ./data/dalvik-cache/ -name *com.mgyun.shua.su* -exec rm -f {} \;"
    ${adb} shell "find ./data/dalvik-cache/ -name *eu.chainfire.supersu* -exec rm -f {} \;"
    ${adb} shell "find ./data/dalvik-cache/ -name *[Ss]uper[Uu]ser.apk* -exec rm -f {} \;"
    ${adb} shell "find ./data/dalvik-cache/ -name *.oat -exec rm -f {} \;"

    ${adb} shell busybox umount /data
    mssg=$(printf "${text_datas_removed}\n" "data")
    display_mssg "n" "${mssg}"

    # manage datas into /system
    get_info_system "android"

    if [[ -z $(${adb} shell mount | busybox egrep system) ]]; then mount "system"; fi

    mssg=$(printf "${text_remove}\n" "${SuperSU}")
    display_mssg "n" "${mssg}"
    ${adb} shell "find .${SYS_APP} -name [Ss]uper[Uu]ser* -exec rm -f {} \;"
    ${adb} shell "find .${SYS_APP} -name [Ss]uper[Ss][Uu]* -exec rm -f {} \;"

    mssg=$(printf "${text_remove}\n" "${SU}")
    display_mssg "n" "${mssg}"
    ${adb} shell "find ./system/bin/ -name .ext -exec rm -rf {} \;"
    ${adb} shell "find .${SYS_BIN} -name sugote* -exec rm -f {} \;"
    ${adb} shell "if [[ -f '${SYS_BIN}${SSUD}' ]]; then rm -f '${SYS_BIN}${SSUD}'; fi"
    ${adb} shell "find .${SYS_ETC} -name init.d -exec rm -rf {} \;"
    ${adb} shell "if [[ -f '${SYS_ETC}.installed_su_daemon' ]]; then rm -f '${SYS_ETC}.installed_su_daemon'; fi"
    ${adb} shell "if [[ -f /system/bin/su || -h /system/bin/su ]]; then rm -f /system/bin/su; fi"
    ${adb} shell "if [[ -f '${SYS_BIN}${SU}' ]]; then rm -f '${SYS_BIN}${SU}'; fi"

    ${adb} shell busybox umount /system

    mssg=$(printf "${text_unroot_end}\n${text_verify_errors}\n")
    display_mssg "n" "${mssg}"

    unset mssg

}

function unroot_to_system() {

    id=$(${adb} shell su -c busybox id -un | sed 's/\r$//'); display_detected "${id}"

    if [[ "${id}" == "root" ]]; then

        mount

        mssg=$(printf "${text_datas_remove}\n" "data")
        display_mssg "n" "${mssg}"

        ${adb} shell su -c "find ./data/app/ -name com.noshufou.android.su-* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/app/ -name com.koushikdutta.superuser-* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/app/ -name com.mgyun.shua.su-* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/app/ -name *eu.chainfire.supersu* -exec rm -f {} \;"

        ${adb} shell su -c "find ./data/app-lib/ -name *eu.chainfire.supersu* -exec rm -rf {} \;"

        ${adb} shell su -c "find ./data/data/ -name *eu.chainfire.supersu* -exec rm -rf {} \;"

        ${adb} shell su -c "find ./data/dalvik-cache/ -name *com.noshufou.android.su* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/dalvik-cache/ -name *com.koushikdutta.superuser* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/dalvik-cache/ -name *com.mgyun.shua.su* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/dalvik-cache/ -name *eu.chainfire.supersu* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/dalvik-cache/ -name *[Ss]uper[Uu]ser.apk* -exec rm -f {} \;"
        ${adb} shell su -c "find ./data/dalvik-cache/ -name *.oat -exec rm -f {} \;"

        mssg=$(printf "${text_datas_removed}\n" "data")
        display_mssg "n" "${mssg}"

        mssg=$(printf "${text_datas_remove}\n" "system")
        display_mssg "n" "${mssg}"
        mssg=$(printf "${text_remove}" "${SuperSU}")
        display_mssg "n" "${mssg}"

        #${adb} shell su -c "if [[ -f ${SYS_APP}Superuser.apk ]]; then rm -f ${SYS_APP}Superuser.apk; fi"
        #${adb} shell su -c "if [[ -f ${SYS_APP}superuser.apk ]]; then rm -f ${SYS_APP}superuser.apk; fi"
        #${adb} shell su -c "if [[ -f ${SYS_APP}SuperUser.apk ]]; then rm -f ${SYS_APP}SuperUser.apk; fi"
        #${adb} shell su -c "if [[ -f ${SYS_APP}superUser.apk ]]; then rm -f ${SYS_APP}superUser.apk; fi"

        ${adb} shell su -c "find .${SYS_APP} -name [Ss]uper[Uu]ser* -exec rm -f {} \;"
        ${adb} shell su -c "find .${SYS_APP} -name [Ss]uper[Ss][Uu]* -exec rm -f {} \;"

        mssg=$(printf "${text_remove}" "${SU}")
        display_mssg "n" "${mssg}"

        ${adb} shell su -c "find ./system/bin/ -name .ext -exec rm -rf {} \;"
        ${adb} shell su -c "find .${SYS_BIN} -name sugote* -exec rm -f {} \;"
        ${adb} shell su -c "if [[ -f '${SYS_BIN}${SSUD}' ]]; then rm -f '${SYS_BIN}${SSUD}'; fi"
        ${adb} shell su -c "find .${SYS_ETC} -name init.d -exec rm -rf {} \;"
        ${adb} shell su -c "if [[ -f '${SYS_ETC}.installed_su_daemon' ]]; then rm -f '${SYS_ETC}.installed_su_daemon'; fi"
        ${adb} shell su -c "if [[ -f /system/bin/su || -h /system/bin/su ]]; then rm -f /system/bin/su; fi"
        ${adb} shell su -c "if [[ -f '${SYS_BIN}${SU}' ]]; then rm -f '${SYS_BIN}${SU}'; fi"

        mssg=$(printf "${text_datas_removed}\n" "system")
        display_mssg "n" "${mssg}"

        mssg=$(printf "${text_unroot_end}\n${text_verify_errors}\n")
        display_mssg "n" "${mssg}"

        sleep 3

        adb_mount_system "r"

    else

        mssg=$(printf "%s" "${text_su_inactive}\n${text_unroot_stop}\n")
        display_error "${mssg}"

    fi

    unset id

}

function verify_ssu_exists() {

    if [[ ! -f "${DIR_SSU}" ]]; then

        mssg=$(printf "\n${text_app_inexistant}\n" "${SuperSU}")
        mssg="${mssg}"$(printf "${text_app_dl}\n" "${SuperSU}" "${URL_SUPERSU}")
        mssg="${mssg}"$(printf "\n${text_ask_dl} ${text_yes_no}")

        display_mssg "q" "${mssg}"

        if [[ $? -eq 0 && "${ZENITY}" -eq 1 ]]; then

            mssg=$(printf "${text_dl_supersu}\n" "${DL_SUPERSU}"); display_mssg "i" "${mssg}"
            curl "${DL_SUPERSU}" > "${FILE_SSU_ZIP}"
            if [[ $? -ne 0 ]]; then
                mssg=$(printf "${text_error_dl}" "${FILE_SSU_ZIP}")
                display_error "${mssg}"
                exit 1
            fi

        elif [[ $? -eq 1 && "${ZENITY}" -eq 1 ]]; then

            mssg=$(printf "${text_dl_yourself}\n" "${SuperSU}")
            mssg="${mssg} ${text_exit_relaunch}"
            display_mssg "i" "${mssg}"
            exit 1

        else

            while true; do
                case $REPLY in
                    y|Y|o|O)
                        mssg=$(printf "${text_dl_supersu}\n" "${DL_SUPERSU}"); display_mssg "i" "${mssg}"; sleep 1
                        curl "${DL_SUPERSU}" > "${FILE_SSU_ZIP}"
                        if [[ $? -ne 0 ]]; then
                            mssg=$(printf "${text_error_dl}" "${FILE_SSU_ZIP}")
                            display_error "${mssg}"
                        fi
                        break
                        ;;
                    n|N)
                        mssg=$(printf "${text_dl_yourself}\n" "${SuperSU}")
                        mssg="${mssg} ${text_exit_relaunch}"
                        display_mssg "i" "${mssg}"
                        exit 1
                    ;;
                    *)
                        display_error "${text_choice_invalid}"
                        read
                    ;;
                esac
            done

        fi

        extract_archive_zip

    else

        display_detected "\n${text_ssu_exists}"

    fi

}

function verify_installed() {

    write_file "log" "### ####### ${title_welcome} ####### ###"

    mssg=$(printf "\n${text_verify_installed}\n")
    display_mssg "i" "${mssg}"
    sleep 1

    # verify if dialog is installed
    if [[ -x $(which dialog) ]]; then
        DIALOG=1
        ZENITY=0
        FILE_TMP="/tmp/RKShellDialog.tmp"
        touch "${FILE_TMP}"
        trap 'rm -f "${FILE_TMP}"' 0 1 2 3 5 15
    fi

    # verify if zenity is installed.
    if [[ -x $(which zenity) ]]; then
        DIALOG=0
        ZENITY=1
        write_file "log" "$now *** Zenity: Yes!"
    fi

    #DIALOG=1
    ZENITY=0

    # adb
    if [[ ! -x $(which adb) ]]; then
        display_error "\n${text_error_not_tools}" "ADB"
        write_file "log" "$now *** adb: Boo!"
        exit 1
    else
        display_detected "\n${text_ok_tools}" "ADB"
        write_file "log" "$now *** adb: Yes!"
        adb=$(which adb)
    fi

}


function write_file() {

    case $1 in
        "cfg") echo "$2" >> "${config}" ;;
        "log") [[ "${LOG}" -eq 1 ]] && echo "$2" >> "logs/log_$day" ;;
    esac

}
