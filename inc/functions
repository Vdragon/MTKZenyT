#!/bin/bash

if ! ${EXEC}; then exit; fi

source "${INC}/display"
source "${INC}/ADB_functions"
source "${INC}/MENU_functions"
source "${INC}/func/functions_arrays"
source "${INC}/func/functions_filesystem"
source "${INC}/func/functions_math"
source "${INC}/func/functions_strings"

function build_vars() {

    if [[ -n "${MENU_NAME[@]}" ]]; then

        # build array MENU_TEXT segun MENU_NAME
        for name in "${MENU_NAME[@]}"; do
            # fill array MENU_TEXT...
            var="text_menu_$name"
            MENU_TEXT["${name}"]="${!var}"
            unset var
        done

    fi

}

function control_system() {

    manage_colors

    test_config_file "$1"
    verify_installed

    write_file "log" "#################################################"
    write_file "log" "### ### ### ${title_welcome} ### ### ###"
    write_file "log" "#################################################"

    #verify_installed
    detect_device

    adb_detect_abi
    adb_detect_sdk
    adb_su

}

function destruct() {

    write_file "log" "${NOW} ### $FUNCNAME: Destruct variables"

    rm_dir "${SCRIPT_TMP_DIR}"

    unset DIALOG ZENITY
    unset archive choice mssg

    write_file "log" "##################################################"
    write_file "log" "### ### ### $0 ENDED ! ### #### ###"
    write_file "log" "##################################################"

}

function detect_args() {

    local action="$1" option="${2:2:4}"
    local -i ERROR=0

    case "${action}" in
        "BACKUP")
            if [[ "${option}" != "info" && "${option}" != "name" ]]; then
                ERROR=1
            fi
        ;;
        "CFG")
            if [[ "${option}" != "info" ]]; then
                ERROR=1
            fi
        ;;
        "FLASH")
            if [[ "${option}" != "name" ]]; then
                ERROR=1
            fi
        ;;
    esac

    if [[ "${ERROR}" -eq 1 ]]; then
        display_unknown_option "$2"
        EXIT
    fi

    unset action option ERROR

}

function detect_device() {

    if [[ (( "${GUI}" != "z" && "${GUI}" != "zenity" )) ]]; then
        display_mssg "n" "${text_detect_dev}" "" "1";
    fi

    detect_usb_connection

    if [[ -z "${pid}" ]]; then

        display_error "${text_dev_unrecognized}\n"
        display_mssg "n" "${text_exit}"

        # if GUI=0|no then display press any key
        #in_array "${GUI}" "${GUIS[@]}"
        #if [[ $? -eq 0 ]]; then press_any_key; fi

        EXIT

    else

        display_detected "${text_VendorID}" "${vid}"
        display_detected "${text_ProductID}" "${pid}"

        detect_mode

        adb_detect_device

        #if [[ "${DIALOG}" -ne 0 ]]; then

            #mssg="$(printf "%s" "\Z${bold}\Z${green}${text_VendorID}\n${text_ProductID}\n${mssg}\Z${neutral}\Z${unbold}")"
            #mssg="$(printf "${mssg}" "${vid}" "${pid}")";
            #display_mssg "n" "${mssg}";

        #elif [[ "${ZENITY}" -ne 0 ]]; then

            #mssg="$(printf "%s" "<span color=\"${green}\"><b>${text_VendorID}\n${text_ProductID}\n${mssg}</b></span>")"
            #mssg="$(printf "${mssg}" "${vid}" "${pid}")";
            #display_mssg "i" "${mssg}" "${text_detect_dev}" "${title_detect_dev}";

        #fi

        #if [[ "${mssg}" ]]; then unset mssg; fi

    fi

}

function detect_mode() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        if [[ "${pid}" == "0c02" ]]; then
            MODE="${MENU_REBOOT[1]}"
        else
            MODE="${MENU_REBOOT[0]}"
        fi

    else
        MODE="${MENU_REBOOT[1]}"
    fi

    local mssg="${text_device_mode}${MODE}"
    display_detected "${mssg}"

    write_file "log" "${NOW} ### $FUNCNAME: VID:${vid} ; PID:${pid} ; MODE:${MODE}"

}

function detect_usb_connection() {

    # attempt to dectect automatically by dmesg, only vid and pid
    local info="$(dmesg | grep -i "usb .* idVendor" | tail -1 | sed 's/\[ /\[/g')"

    if [[ -n "${info}" ]]; then
        pid="$(awk '{ print substr($9, length("idProduct= "), 4) }' <<< ${info})"
        vid="$(awk '{ print substr($8, length("idVendor= "), 4) }' <<< ${info})"
    fi
    unset info

    # if not auto-detect, config vid and pid by config file
    if [[ -z "${vid}" ]]; then
        local lsusb=""
        for (( x=0; x < $(count "${VID[@]}") ; x++ )); do
            vid="${VID[$x]}"
            lsusb=$(lsusb | egrep "${vid}")

            if [[ -n "${lsusb}" ]]; then break; fi
        done

        if [[ -n "${lsusb}" ]]; then
            pid=$(awk '/'"${vid}"'/ { print substr($6, length("'"${vid}"': ")) } ' <<< "${lsusb}")
        fi
        unset lsusb
    fi
    write_file "log" "${NOW} ### $FUNCNAME: VID=${vid} ; PID=${pid}"

    ###
    # Using lsusb to obtain good informations about device
    ###
    local file="${SCRIPT_TMP_DIR}lsusb.tmp"
    # examine lsusb to detect device segun vid
    local dev_usb="$(lsusb | grep "${vid}" | awk '{ print $2"/"substr($4,0,3)}')"
    # obtain all informations about device by lsusb -D
    $(lsusb -D /dev/bus/usb/${dev_usb} > "${file}")
    unset dev_usb

    if [[ -f "${file}" ]]; then
        ANDROID_MANUFACTURER="$(awk '/iManufacturer/ { print $3 }' ${file})"
        ANDROID_PRODUCT="$(awk '/iProduct/ { print $3,$4,$5 }' ${file})"
        ANDROID_SERIAL="$(awk '/iSerial/ { print $3 }' ${file})"

        write_file "log" "${NOW} ### $FUNCNAME: ANDROID_MANUFACTURER=${ANDROID_MANUFACTURER} ; ANDROID_PRODUCT=${ANDROID_PRODUCT} ; ANDROID_SERIAL=${ANDROID_SERIAL}"
        rm "${file}"
    fi
    unset file

}

function dl_file() {

    # call: dl_file URL FILE_NAME

    mssg=$(printf "${text_dl_file}\n" "$1"); display_mssg "n" "${mssg}"

    curl "$1" > "$2"

    if [[ $? -ne 0 ]]; then
        mssg=$(printf "${text_error_dl}" "$2")
        display_error "${mssg}"

        write_file "log" "${NOW} ### $FUNCNAME: Error to download file: $2 - from: $1"

        EXIT
    fi

}

function dl_yourself() {

    # call: dl_yoursel FILE_NAME

    mssg="$(printf "${text_dl_yourself}\n" "$1")"
    mssg="$(printf "${text_into_tools}\n" "${DIR_TOOLS}")"
    mssg="${mssg} ${text_exit_relaunch}"
    display_mssg "i" "${mssg}"

    write_file "log" "${NOW} ### $FUNCNAME: Need to download yourself the file: $1"

    EXIT

}

function extract_archive_zip() {

    if [[ -d "${DIR_SSU}" ]]; then

        display_mssg "q" "${text_dir_ssu_upd}"

        if [[ "${ZENITY}" -ne 0 ]]; then

            REPLY=$?

        elif [[ "${DIALOG}" -ne 0 ]]; then

            REPLY="${read}"

        fi

        case "${REPLY}" in
            o|O|y|Y|0)
                sleep 1 ;;
            n|N|1)
                rm_dir "${DIR_SSU}"; sleep 3 ;;
            *)
                display_error "${text_choice_invalid}"
                press_any_key
                extract_archive_zip
            ;;
        esac

    fi

    if [[ ! -d "${DIR_SSU}" ]]; then

        if [[ -f "${SSU_FILE_ZIP}" ]]; then

            mssg=$(printf "\n${text_unzip}\n" "${SSU_FILE_ZIP}")
            display_mssg "n" "${mssg}"
            unzip -o "${DIR_UNZIP}" -d "${DIR_UNZIP}"

            if [[ $? -eq 0 ]]; then
                mssg="$(printf "${text_unzip_ok}" "${SSU_FILE_ZIP}")"
                display_mssg "n" "${mssg}"

                write_file "log" "${NOW} ### $FUNCNAME: Unzip OK: ${SSU_DIR_UNZIP}"
            else
                mssg="$(printf "${text_error_unzip}" "$?" "${SSU_FILE_ZIP}")"
                display_error "${mssg}"

                write_file "log" "${NOW} ### $FUNCNAME: Unzip KO: ${SSU_DIR_UNZIP}"

                press_any_key
                EXIT
            fi

        fi

    fi

}

function extract_info_system() {

    if [[ -f "${FILE_PARAM}" ]]; then

        CMDLINE=$(egrep "^$1" "${FILE_PARAM}" | sed 's/\r$//')

        local IFS=": "; shift; read -a params <<< "${CMDLINE}"

        INFO_MAP["$1"]=${params[4]}
        mssg=$(printf "${text_system_info}\n" "$1" "${INFO_MAP[$1]}" )
        display_mssg "n" "${mssg}"

        write_file "log" "${NOW} ### $FUNCNAME: $1 == ${INFO_MAP[$1]}"

    fi

}

function file_to_array_mtd() {

    # init arrays mtd
    MTD_NAME=()
    MTD_SIZE=()
    MTD_ADDR=()
    MTD_TYPE=()
    MTD_MAP=()
    MTD_SIZE_DEC=()
    MTD_ADDR_DEC=()
    MTD_SIZE_BLOCK=()
    MTD_ADDR_BLOCK=()

    x=0
    # read file param into array
    while read line; do

        if [[ $x -ge 1 && $x -le 22 ]]; then

            local IFS=" "; shift; read -a mtd <<< "$(echo "${line}" | sed 's/\r$//' | tr -s ' ')"

            # create arrays dynamic 'mtd_$info_name[value]'
            in_array "${mtd[0]}" "${PART_NOBCKP[@]}"
            if [[ $? -ne 0 ]]; then

                MTD_NAME[$x]="${mtd[0]}"
                MTD_SIZE[$x]="${mtd[1]}"
                MTD_ADDR[$x]="${mtd[2]}"
                MTD_TYPE[$x]="${mtd[3]}"
                MTD_MAP[$x]="${mtd[4]}"
                MTD_SIZE_DEC[$x]=$(hexdec "${MTD_SIZE[$x]}")
                MTD_ADDR_DEC[$x]=$(hexdec "${MTD_ADDR[$x]}")
                MTD_SIZE_BLOCK[$x]=$(bc <<< "${MTD_SIZE_DEC[$x]} / ${INODE}")
                MTD_ADDR_BLOCK[$x]=$(bc <<< "${MTD_ADDR_DEC[$x]} / ${INODE}")

            fi
            unset mtd

        fi

        let x=x+1;

    done < "${FILE_PARAM}"
    unset x

    # reindex mtd arrays
    MTD_NAME=("${MTD_NAME[@]}")
    MTD_SIZE=("${MTD_SIZE[@]}")
    MTD_ADDR=("${MTD_ADDR[@]}")
    MTD_TYPE=("${MTD_TYPE[@]}")
    MTD_MAP=("${MTD_MAP[@]}")
    MTD_SIZE_DEC=("${MTD_SIZE_DEC[@]}")
    MTD_ADDR_DEC=("${MTD_ADDR_DEC[@]}")
    MTD_SIZE_BLOCK=("${MTD_SIZE_BLOCK[@]}")
    MTD_ADDR_BLOCK=("${MTD_ADDR_BLOCK[@]}")

    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_NAME[ ${MTD_NAME[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_SIZE[ ${MTD_SIZE[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_ADDR[ ${MTD_ADDR[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_TYPE[ ${MTD_TYPE[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_MAP[ ${MTD_MAP[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_ADDR_DEC[ ${MTD_ADDR_DEC[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_ADDR_BLOCK[ ${MTD_ADDR_BLOCK[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_SIZE_DEC[ ${MTD_SIZE_DEC[*]} ]"
    write_file "log" "${NOW} ### $FUNCNAME: Create mtd array: MTD_SIZE_BLOCK[ ${MTD_SIZE_BLOCK[*]} ]"

}

function get_dir_backup() {

    if [[ -z "${DIR_SVG}" ]]; then

        choose_directory "d" "${title_dir_svg}" && DIR_SVG="${DIR_CHOOSED}"
        write_file "cfg" "DIR_SVG" "${DIR_SVG}"

    fi

    write_file "log" "${NOW} *** $FUNCNAME: DIR_SVG=${DIR_SVG}"

}

function get_info_system() {

    # call: get_info_system partition_name
    adb_read_partitions

    extract_info_system "$1"

}

function make_backup() {

    # obtain dir to save
    get_dir_backup

    # mkdir dated into DIR_SVG !
    if [[ -d "${DIR_SVG}" ]]; then make_dir_dated; fi

    if [[ -d "${DIR_SVG_DATED}" ]]; then adb_save_partitions; fi

}

function manage_colors() {

    i=0

    while [ $i -le $(count ${COLORS_NAME[@]}) ]; do

        if [[ "${DIALOG}" -ne 0 ]]; then

            if [[ -n "${COLORS_NAME[$i]}" ]]; then
                export declare "${COLORS_NAME[$i]}"="${COLORS_VALUE[$i]}"
            fi

        elif [[ "${ZENITY}" -ne 0 ]]; then

            if [[ -n "${COLORS_NAME[$i]}" ]]; then
                export declare "${COLORS_NAME[$i]}"="${COLORS_NAME[$i]}"
            fi

        else

            if [[ -n "${COLORS_NAME[$i]}" ]]; then
                export declare "${COLORS_NAME[$i]}"="3${COLORS_VALUE[$i]}"
            fi

        fi

        let i=i+1

    done

    unset i

}

function manage_fonts() {

    manage_colors

    i=0

    while [ $i -le $(count ${COLORS_NAME[@]}) ]; do

        if [[ "${DIALOG}" -ne 0 ]]; then

            neutral="n"
            bold="b"; unbold="B"
            underline="u"; ununderline="U"
            esc_seq="\Z"

        elif [[ "${ZENITY}" -ne 0 ]]; then

            neutral="</span>"
            bold="<b>"; unbold="</b>"
            underline="<u>"; ununderline="</u>"
            esc_seq=""

        else

            neutral="0"
            bold="1"; unbold="${neutral}"
            underline="4"; ununderline="${neutral}"
            esc_seq="\e["

        fi

        let i=i+1

    done

    unset i

}

function modify_system() {

    if [[ "${vid}" == "${VID[0]}" ]]; then

        adb_root_system

    fi

}

function press_any_key() {

    local action="$1"

    case "${action}" in
        "ready")
            read -p "${text_press_key_when_ready}" -n1 -s
        ;;
        "reboot")
            read -p "${text_press_key_after_reboot}" -n1 -s
        ;;
        *)
            read -p "${text_press_key}" -n1 -s
        ;;
    esac

    echo " "
    unset action

}

function read_config() {

    search=$(grep "$1" "${PWD}/${CONFIG}")  # search0
    if [[ -n "${search}" ]]; then

        # if search begin with...
        s1=$(grep "^DIR" <<< "${search}")   # search1
        s2=$(grep "^BCKP" <<< "${search}")  # search2
        if [[ "$s1" || "$s2" ]]; then

            # if ultimate character of search isn't '/' and not '=', add-it '/'
            s3=$(grep "./$" <<< "${search}")    # search3
            s4=$(grep ".=$" <<< "${search}")    # search4
            if [[ ! "$s3" && ! "$s4" ]]; then
                search="${search}/";
            fi
            unset s3 s4

        fi
        unset s1 s2

        # echo all characters after symbol '='
        echo "${search#*=}"

    fi
    unset search

}

function reboot_recovery() {

    if [[ "${vid}" != "${VID[0]}" ]]; then

        display_error "\n${text_dev_not_recovery}\n"
        display_mssg "q" "${text_ask_restart}"

        if [[ "${ZENITY}" -ne 0 ]]; then

            REPLY=$?

        elif [[ "${DIALOG}" -ne 0 ]]; then

            REPLY="${read}"

        fi

        while true; do
            case $REPLY in
                y|Y|o|O|0)
                    steps_to_recovery
                    break
                ;;
                n|N|1)
                    mssg="${text_reboot_yoursel}\n${text_exit_reboot}"
                    display_mssg "i" "${mssg}"

                    EXIT
                ;;
                *)
                    display_error "${text_choice_invalid}"
                    press_any_key
                    reboot_recovery
                ;;
            esac
        done

    else

        display_mssg "n" "\n${text_into_recovery}\n"; sleep 1

    fi

}

function reboot_system() {

    display_mssg "i" "${text_verify_errors}"

    display_mssg "q" "${text_ask_reboot_system}"

    if [[ "${ZENITY}" -ne 0 ]]; then

        REPLY=$?

    elif [[ "${DIALOG}" -ne 0 ]]; then

        REPLY="${read}"

    fi

    while true; do
        case $REPLY in
            y|Y|o|O|0)
                display_mssg "i" "${text_goodbye_info}\n${text_goodbye}"
                adb_reboot_system
                break
            ;;
            n|N|1)
                mssg=$(printf "${text_reboot_yourself}\n${text_exit}")
                display_mssg "i" "${mssg}"

                EXIT
            ;;
            *)
                display_error "${text_choice_invalid}"
                press_any_key
                reboot_system
            ;;
        esac
    done

}

function root_to_recovery() {

    reboot_recovery

    verify_ssu_exists

    #get_info_system "android"
    adb_read_partitions

    if [[ -f "${FILE_PARAM}" ]]; then

        file_to_array_mtd

        adb_root_system

        reboot_system

    fi

}

function save_rom() {

    if [[ "${ZENITY}" -ne 0 ]]; then
        (
            adb_save_partitions
        ) | zenity_progress "${text_save_tablet}" "${title_save_tablet}"
    else
        adb_save_partitions
    fi

}

function steps_to_recovery() {

    adb_reboot_recovery

    #display_mssg "n" "${press_any_key_after_reboot}"
    press_any_key "reboot"

    detect_device

    choice="UNROOT"
    #$0

}

function test_config_file() {

    display_mssg "n" "\n${text_detect_cfg}"

    if [[ -f "${CONFIG}" && -r "${CONFIG}" ]]; then

        LOG=$(read_config "LOG") && display_detected "LOG=${LOG}"

        BCKP_PHONE=$(read_config "BCKP_PHONE");
        if [[ -z "${BCKP_PHONE}" ]]; then BCKP_PHONE="${CFG_BCKP_PHONE}"; fi
        display_detected "BCKP_PHONE=${BCKP_PHONE}"

        CFG=1 && display_detected "CFG=1"

        DIR_SVG=$(read_config "DIR_SVG") && display_detected "DIR_SVG=${DIR_SVG}"

        if [[ "$1" == "MTKZenyTux" ]]; then
            GUI=$(read_config "GUI") && display_detected "GUI=${GUI}"
        else
            GUI=0 && display_detected "GUI=${GUI}"
        fi

    else

        mssg="$(printf "${text_error_file}\n" "${CONFIG}")"
        display_error "${mssg}"

        press_any_key
        EXIT

    fi

}

function unroot_to_recovery() {

    reboot_recovery

    # manage datas into /data
    #get_info_system "usrdata"

    #if [[ -z $(adb_verify_mount "data") ]]; then mount "data"; fi
    if [[ -z $(adb_verify_mount "data") ]]; then adb_mount_partition "data"; fi

    adb_delete_su_datas

    adb_umount_partition "data"

    # manage datas into /system
    #get_info_system "android"

    #if [[ -z $(adb_verify_mount "system") ]]; then mount "system"; fi
    if [[ -z $(adb_verify_mount "system") ]]; then adb_mount_partition "system"; fi

    adb_delete_supersu

    adb_delete_su_system

    adb_umount_partition "system"

    mssg=$(printf "${text_step_end}\n${text_verify_errors}\n" "$FUNCNAME")
    display_mssg "n" "${mssg}"

}

function unroot_to_system() {

    ##id=$(${adb} shell su -c busybox id -un | sed 's/\r$//'); display_detected "${id}"
    #whoami="$(adb_whoami)"; display_detected "id: ${whoami}"

    if [[ "$(adb_whoami)" == "uid=0" ]]; then

        adb_mount_partition "w"

        adb_delete_su_datas

        adb_delete_supersu

        adb_delete_su_system

        mssg=$(printf "${text_step_end}\n${text_verify_errors}\n" "$FUNCNAME")
        display_mssg "n" "${mssg}" "" "1"

        sleep 3

        adb_mount_partition "r"

    else

        mssg=$(printf "${text_su_inactive}\n${text_step_stop}\n" "$FUNCNAME")
        display_error "${mssg}"

        in_array "${GUI}" "${GUIS[@]}"
        if [[ $? -eq 0 ]]; then press_any_key; fi

    fi

    unset id

}

function verify_ssu_exists() {

    x=0
    for file in $(find "${DIR_TOOLS}" -type f -iname "*supersu*"); do
        SSU_FILES[$x]="${file}"
        SSU_VERSIONS[$x]="$(awk -F "UPDATE-SuperSU-v" '{ print $2 }' <<< "${file}" | sed 's/.zip//g')"
        ((x++))
    done
    unset file x

    write_file "log" "${NOW} ### $FUNCNAME: SSU_FILES:'${SSU_FILES[@]}'"

    if [[ -z "${SSU_FILES}" ]]; then
        mssg=$(printf "\n${text_app_inexistant}\n" "${SSU_APK}")
        mssg="${mssg}"$(printf "${text_app_dl}\n" "${SSU_APK}" "${SSU_URL}")
        display_error "${mssg}"

        dl_yourself "${SSU_APK}"
    else

        if [[ $(count "${SSU_VERSIONS[@]}") -gt 1 ]]; then
            display_files

            local -i index=$(bc <<< "${FILES} - 1")
            SSU_FILE_ZIP="${SSU_FILES[${index}]}"
            SSU_VERSION="${SSU_VERSIONS[${index}]}"
            unset index

        else

            SSU_FILE_ZIP="${SSU_FILES[0]}"
            SSU_VERSION="${SSU_VERSIONS[0]}"

        fi
        display_detected "SSU_FILE_ZIP: ${SSU_FILE_ZIP}"
        display_detected "SSU_VERSION: ${SSU_VERSION}"

        SSU_DIR_UNZIP="$(dirname ${SSU_FILE_ZIP})"; display_detected "SSU_DIR_UNZIP: ${SSU_DIR_UNZIP}"
        SSU_DIR="${SSU_DIR_UNZIP}/"; display_detected "SSU_DIR: ${SSU_DIR}"

        SSU_DIR_CMN="${SSU_DIR}common/"; display_detected "SSU_DIR_CMN: ${SSU_DIR_CMN}"
        SSU_DIR_APK="${SSU_DIR_CMN}${SSU_APK}"; display_detected "SSU_DIR_APK: ${SSU_DIR_APK}"
        SSU_DIR_SSUD="${SSU_DIR_CMN}${SSU_SSUD}"; display_detected "SSU_DIR_SSUD: ${SSU_DIR_SSUD}"

        #adb_detect_abi
        SSU_DIR_ARCH="${SSU_DIR}${ARCH}/"; display_detected "SSU_DIR_ARCH: ${SSU_DIR_ARCH}"
        SSU_DIR_SU="${SSU_DIR_ARCH}${SSU_SU}"; display_detected "SSU_DIR_SU: ${SSU_DIR_SU}"

        if [[ -f "${SSU_FILE_ZIP}" ]]; then extract_archive_zip; fi

    fi

}

#function verify_archive() {

    #if [[ -f "${SSU_FILE_ZIP}" ]]; then

        #local key="$(array_search "${SSU_VERSION}" "${SSU_STATS_VERSION[@]}")"
        #local stat="$(stat -c "%s" "${SSU_FILE_ZIP}")"

        #if [[ "${stat}" -ne "${SSU_STATS_SIZE[${key}]}" ]]; then

            #mssg="$(printf "${text_error_zip_ssu}" "${stat}" "${SSU_STATS_SIZE[${key}]}")"
            #display_error "${mssg}"

            #dl_yourself

        #else

            #extract_archive_zip

        #fi

    #fi

#}

function verify_installed() {

    mssg=$(printf "%s" "\n${text_verify_installed}\n")
    display_mssg "i" "${mssg}"
    sleep 1

    if [[ -n "${GUI}" ]]; then

        GUI=$(awk '{print tolower($0)}' <<< ${GUI});
        display_detected "GUI: ${GUI}"

    fi

    if in_array "${GUI}" "${GUIS[@]}"; then

        # verify if dialog is installed
        if [[ (( "${GUI}" == "d" || "${GUI}" == "dialog" )) && -x $(which dialog) ]]; then
            DIALOG=1

            dialog=$(which dialog)
            source "${INC}/dialog"

        fi

        # verify if zenity is installed.
        if [[ (( "${GUI}" == "z" || "${GUI}" == "zenity" )) && -x $(which zenity) ]]; then
            ZENITY=1

            zenity=$(which zenity)
            source "${INC}/zenity"

        fi

        #DIALOG=1
        #ZENITY=0

    fi

    manage_fonts

    if [[ "${DIALOG}" -eq 1 ]]; then
        display_detected "${text_ok_tools}" "Dialog"
        write_file "log" "${NOW} *** $FUNCNAME: Dialog: Yes!"
    fi

    if [[ "${ZENITY}" -eq 1 ]]; then
        display_detected "${text_ok_tools}" "Zenity"
        write_file "log" "${NOW} *** $FUNCNAME: Zenity: Yes!"
    fi

    # adb
    if [[ ! -x $(which adb) ]]; then
        display_error "\n${text_error_not_tools}" "ADB"
        write_file "log" "${NOW} *** $FUNCNAME: adb: Boo!"
        EXIT
    else
        display_detected "${text_ok_tools}" "ADB"
        write_file "log" "${NOW} *** $FUNCNAME: adb: Yes!"
        #adb=$(which adb)
    fi

    # Make dir tmp
    if [[ ! -d "${SCRIPT_TMP_DIR}" ]]; then mkdir "${SCRIPT_TMP_DIR}"; fi

}
